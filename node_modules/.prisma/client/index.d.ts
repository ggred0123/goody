
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model Keyword
 * 
 */
export type Keyword = $Result.DefaultSelection<Prisma.$KeywordPayload>
/**
 * Model ActivityKeyword
 * 
 */
export type ActivityKeyword = $Result.DefaultSelection<Prisma.$ActivityKeywordPayload>
/**
 * Model ActivityLocation
 * 
 */
export type ActivityLocation = $Result.DefaultSelection<Prisma.$ActivityLocationPayload>
/**
 * Model UserLocation
 * 
 */
export type UserLocation = $Result.DefaultSelection<Prisma.$UserLocationPayload>
/**
 * Model Recommendation
 * 
 */
export type Recommendation = $Result.DefaultSelection<Prisma.$RecommendationPayload>
/**
 * Model RecentActivity
 * 
 */
export type RecentActivity = $Result.DefaultSelection<Prisma.$RecentActivityPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs>;

  /**
   * `prisma.keyword`: Exposes CRUD operations for the **Keyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keywords
    * const keywords = await prisma.keyword.findMany()
    * ```
    */
  get keyword(): Prisma.KeywordDelegate<ExtArgs>;

  /**
   * `prisma.activityKeyword`: Exposes CRUD operations for the **ActivityKeyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityKeywords
    * const activityKeywords = await prisma.activityKeyword.findMany()
    * ```
    */
  get activityKeyword(): Prisma.ActivityKeywordDelegate<ExtArgs>;

  /**
   * `prisma.activityLocation`: Exposes CRUD operations for the **ActivityLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLocations
    * const activityLocations = await prisma.activityLocation.findMany()
    * ```
    */
  get activityLocation(): Prisma.ActivityLocationDelegate<ExtArgs>;

  /**
   * `prisma.userLocation`: Exposes CRUD operations for the **UserLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLocations
    * const userLocations = await prisma.userLocation.findMany()
    * ```
    */
  get userLocation(): Prisma.UserLocationDelegate<ExtArgs>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<ExtArgs>;

  /**
   * `prisma.recentActivity`: Exposes CRUD operations for the **RecentActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecentActivities
    * const recentActivities = await prisma.recentActivity.findMany()
    * ```
    */
  get recentActivity(): Prisma.RecentActivityDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Activity: 'Activity',
    Keyword: 'Keyword',
    ActivityKeyword: 'ActivityKeyword',
    ActivityLocation: 'ActivityLocation',
    UserLocation: 'UserLocation',
    Recommendation: 'Recommendation',
    RecentActivity: 'RecentActivity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "activity" | "keyword" | "activityKeyword" | "activityLocation" | "userLocation" | "recommendation" | "recentActivity"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      Keyword: {
        payload: Prisma.$KeywordPayload<ExtArgs>
        fields: Prisma.KeywordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeywordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeywordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          findFirst: {
            args: Prisma.KeywordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeywordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          findMany: {
            args: Prisma.KeywordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>[]
          }
          create: {
            args: Prisma.KeywordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          createMany: {
            args: Prisma.KeywordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeywordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>[]
          }
          delete: {
            args: Prisma.KeywordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          update: {
            args: Prisma.KeywordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          deleteMany: {
            args: Prisma.KeywordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeywordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KeywordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          aggregate: {
            args: Prisma.KeywordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeyword>
          }
          groupBy: {
            args: Prisma.KeywordGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeywordGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeywordCountArgs<ExtArgs>
            result: $Utils.Optional<KeywordCountAggregateOutputType> | number
          }
        }
      }
      ActivityKeyword: {
        payload: Prisma.$ActivityKeywordPayload<ExtArgs>
        fields: Prisma.ActivityKeywordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityKeywordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityKeywordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          findFirst: {
            args: Prisma.ActivityKeywordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityKeywordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          findMany: {
            args: Prisma.ActivityKeywordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>[]
          }
          create: {
            args: Prisma.ActivityKeywordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          createMany: {
            args: Prisma.ActivityKeywordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityKeywordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>[]
          }
          delete: {
            args: Prisma.ActivityKeywordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          update: {
            args: Prisma.ActivityKeywordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          deleteMany: {
            args: Prisma.ActivityKeywordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityKeywordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityKeywordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityKeywordPayload>
          }
          aggregate: {
            args: Prisma.ActivityKeywordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityKeyword>
          }
          groupBy: {
            args: Prisma.ActivityKeywordGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityKeywordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityKeywordCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityKeywordCountAggregateOutputType> | number
          }
        }
      }
      ActivityLocation: {
        payload: Prisma.$ActivityLocationPayload<ExtArgs>
        fields: Prisma.ActivityLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          findFirst: {
            args: Prisma.ActivityLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          findMany: {
            args: Prisma.ActivityLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>[]
          }
          create: {
            args: Prisma.ActivityLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          createMany: {
            args: Prisma.ActivityLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>[]
          }
          delete: {
            args: Prisma.ActivityLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          update: {
            args: Prisma.ActivityLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivityLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLocationPayload>
          }
          aggregate: {
            args: Prisma.ActivityLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLocation>
          }
          groupBy: {
            args: Prisma.ActivityLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLocationCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLocationCountAggregateOutputType> | number
          }
        }
      }
      UserLocation: {
        payload: Prisma.$UserLocationPayload<ExtArgs>
        fields: Prisma.UserLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          findFirst: {
            args: Prisma.UserLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          findMany: {
            args: Prisma.UserLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>[]
          }
          create: {
            args: Prisma.UserLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          createMany: {
            args: Prisma.UserLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>[]
          }
          delete: {
            args: Prisma.UserLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          update: {
            args: Prisma.UserLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          deleteMany: {
            args: Prisma.UserLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          aggregate: {
            args: Prisma.UserLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLocation>
          }
          groupBy: {
            args: Prisma.UserLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLocationCountArgs<ExtArgs>
            result: $Utils.Optional<UserLocationCountAggregateOutputType> | number
          }
        }
      }
      Recommendation: {
        payload: Prisma.$RecommendationPayload<ExtArgs>
        fields: Prisma.RecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findFirst: {
            args: Prisma.RecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findMany: {
            args: Prisma.RecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          create: {
            args: Prisma.RecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          createMany: {
            args: Prisma.RecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecommendationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          delete: {
            args: Prisma.RecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          update: {
            args: Prisma.RecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.RecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
      RecentActivity: {
        payload: Prisma.$RecentActivityPayload<ExtArgs>
        fields: Prisma.RecentActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecentActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecentActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          findFirst: {
            args: Prisma.RecentActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecentActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          findMany: {
            args: Prisma.RecentActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>[]
          }
          create: {
            args: Prisma.RecentActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          createMany: {
            args: Prisma.RecentActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecentActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>[]
          }
          delete: {
            args: Prisma.RecentActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          update: {
            args: Prisma.RecentActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          deleteMany: {
            args: Prisma.RecentActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecentActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecentActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentActivityPayload>
          }
          aggregate: {
            args: Prisma.RecentActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecentActivity>
          }
          groupBy: {
            args: Prisma.RecentActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecentActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecentActivityCountArgs<ExtArgs>
            result: $Utils.Optional<RecentActivityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activities: number
    userLocations: number
    recommendations: number
    recentActivities: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    userLocations?: boolean | UserCountOutputTypeCountUserLocationsArgs
    recommendations?: boolean | UserCountOutputTypeCountRecommendationsArgs
    recentActivities?: boolean | UserCountOutputTypeCountRecentActivitiesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLocationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecentActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecentActivityWhereInput
  }


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    activityKeywords: number
    recentActivities: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityKeywords?: boolean | ActivityCountOutputTypeCountActivityKeywordsArgs
    recentActivities?: boolean | ActivityCountOutputTypeCountRecentActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountActivityKeywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityKeywordWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountRecentActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecentActivityWhereInput
  }


  /**
   * Count Type KeywordCountOutputType
   */

  export type KeywordCountOutputType = {
    activityKeywords: number
  }

  export type KeywordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityKeywords?: boolean | KeywordCountOutputTypeCountActivityKeywordsArgs
  }

  // Custom InputTypes
  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordCountOutputType
     */
    select?: KeywordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountActivityKeywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityKeywordWhereInput
  }


  /**
   * Count Type ActivityLocationCountOutputType
   */

  export type ActivityLocationCountOutputType = {
    recommendations: number
  }

  export type ActivityLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recommendations?: boolean | ActivityLocationCountOutputTypeCountRecommendationsArgs
  }

  // Custom InputTypes
  /**
   * ActivityLocationCountOutputType without action
   */
  export type ActivityLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocationCountOutputType
     */
    select?: ActivityLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityLocationCountOutputType without action
   */
  export type ActivityLocationCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }


  /**
   * Count Type UserLocationCountOutputType
   */

  export type UserLocationCountOutputType = {
    recommendations: number
  }

  export type UserLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recommendations?: boolean | UserLocationCountOutputTypeCountRecommendationsArgs
  }

  // Custom InputTypes
  /**
   * UserLocationCountOutputType without action
   */
  export type UserLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocationCountOutputType
     */
    select?: UserLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserLocationCountOutputType without action
   */
  export type UserLocationCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    username: string | null
    email: string | null
    profileImage: string | null
    password: string | null
    refreshToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    username: string | null
    email: string | null
    profileImage: string | null
    password: string | null
    refreshToken: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    username: number
    email: number
    profileImage: number
    password: number
    refreshToken: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    username?: true
    email?: true
    profileImage?: true
    password?: true
    refreshToken?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    username?: true
    email?: true
    profileImage?: true
    password?: true
    refreshToken?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    username?: true
    email?: true
    profileImage?: true
    password?: true
    refreshToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    username: string
    email: string
    profileImage: string | null
    password: string
    refreshToken: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    email?: boolean
    profileImage?: boolean
    password?: boolean
    refreshToken?: boolean
    activities?: boolean | User$activitiesArgs<ExtArgs>
    userLocations?: boolean | User$userLocationsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    recentActivities?: boolean | User$recentActivitiesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    email?: boolean
    profileImage?: boolean
    password?: boolean
    refreshToken?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    username?: boolean
    email?: boolean
    profileImage?: boolean
    password?: boolean
    refreshToken?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | User$activitiesArgs<ExtArgs>
    userLocations?: boolean | User$userLocationsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    recentActivities?: boolean | User$recentActivitiesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      userLocations: Prisma.$UserLocationPayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
      recentActivities: Prisma.$RecentActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      username: string
      email: string
      profileImage: string | null
      password: string
      refreshToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany"> | Null>
    userLocations<T extends User$userLocationsArgs<ExtArgs> = {}>(args?: Subset<T, User$userLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findMany"> | Null>
    recommendations<T extends User$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany"> | Null>
    recentActivities<T extends User$recentActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$recentActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly refreshToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.userLocations
   */
  export type User$userLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    where?: UserLocationWhereInput
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    cursor?: UserLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * User.recommendations
   */
  export type User$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * User.recentActivities
   */
  export type User$recentActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    where?: RecentActivityWhereInput
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    cursor?: RecentActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecentActivityScalarFieldEnum | RecentActivityScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    activityId: number | null
    userId: number | null
  }

  export type ActivitySumAggregateOutputType = {
    activityId: number | null
    userId: number | null
  }

  export type ActivityMinAggregateOutputType = {
    activityId: number | null
    title: string | null
    description: string | null
    location: string | null
    imageUrl: string | null
    createdAt: Date | null
    userId: number | null
  }

  export type ActivityMaxAggregateOutputType = {
    activityId: number | null
    title: string | null
    description: string | null
    location: string | null
    imageUrl: string | null
    createdAt: Date | null
    userId: number | null
  }

  export type ActivityCountAggregateOutputType = {
    activityId: number
    title: number
    description: number
    location: number
    imageUrl: number
    createdAt: number
    userId: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    activityId?: true
    userId?: true
  }

  export type ActivitySumAggregateInputType = {
    activityId?: true
    userId?: true
  }

  export type ActivityMinAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    location?: true
    imageUrl?: true
    createdAt?: true
    userId?: true
  }

  export type ActivityMaxAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    location?: true
    imageUrl?: true
    createdAt?: true
    userId?: true
  }

  export type ActivityCountAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    location?: true
    imageUrl?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl: string | null
    createdAt: Date
    userId: number
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    activityKeywords?: boolean | Activity$activityKeywordsArgs<ExtArgs>
    recentActivities?: boolean | Activity$recentActivitiesArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    activityId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    activityKeywords?: boolean | Activity$activityKeywordsArgs<ExtArgs>
    recentActivities?: boolean | Activity$recentActivitiesArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      activityKeywords: Prisma.$ActivityKeywordPayload<ExtArgs>[]
      recentActivities: Prisma.$RecentActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      activityId: number
      title: string
      description: string
      location: string
      imageUrl: string | null
      createdAt: Date
      userId: number
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `activityId`
     * const activityWithActivityIdOnly = await prisma.activity.findMany({ select: { activityId: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activities and only return the `activityId`
     * const activityWithActivityIdOnly = await prisma.activity.createManyAndReturn({ 
     *   select: { activityId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activityKeywords<T extends Activity$activityKeywordsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$activityKeywordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findMany"> | Null>
    recentActivities<T extends Activity$recentActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$recentActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */ 
  interface ActivityFieldRefs {
    readonly activityId: FieldRef<"Activity", 'Int'>
    readonly title: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly location: FieldRef<"Activity", 'String'>
    readonly imageUrl: FieldRef<"Activity", 'String'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly userId: FieldRef<"Activity", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
  }

  /**
   * Activity.activityKeywords
   */
  export type Activity$activityKeywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    where?: ActivityKeywordWhereInput
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    cursor?: ActivityKeywordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityKeywordScalarFieldEnum | ActivityKeywordScalarFieldEnum[]
  }

  /**
   * Activity.recentActivities
   */
  export type Activity$recentActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    where?: RecentActivityWhereInput
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    cursor?: RecentActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecentActivityScalarFieldEnum | RecentActivityScalarFieldEnum[]
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model Keyword
   */

  export type AggregateKeyword = {
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  export type KeywordAvgAggregateOutputType = {
    keywordId: number | null
  }

  export type KeywordSumAggregateOutputType = {
    keywordId: number | null
  }

  export type KeywordMinAggregateOutputType = {
    keywordId: number | null
    keywordName: string | null
  }

  export type KeywordMaxAggregateOutputType = {
    keywordId: number | null
    keywordName: string | null
  }

  export type KeywordCountAggregateOutputType = {
    keywordId: number
    keywordName: number
    _all: number
  }


  export type KeywordAvgAggregateInputType = {
    keywordId?: true
  }

  export type KeywordSumAggregateInputType = {
    keywordId?: true
  }

  export type KeywordMinAggregateInputType = {
    keywordId?: true
    keywordName?: true
  }

  export type KeywordMaxAggregateInputType = {
    keywordId?: true
    keywordName?: true
  }

  export type KeywordCountAggregateInputType = {
    keywordId?: true
    keywordName?: true
    _all?: true
  }

  export type KeywordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keyword to aggregate.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keywords
    **/
    _count?: true | KeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordMaxAggregateInputType
  }

  export type GetKeywordAggregateType<T extends KeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyword[P]>
      : GetScalarType<T[P], AggregateKeyword[P]>
  }




  export type KeywordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordWhereInput
    orderBy?: KeywordOrderByWithAggregationInput | KeywordOrderByWithAggregationInput[]
    by: KeywordScalarFieldEnum[] | KeywordScalarFieldEnum
    having?: KeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordCountAggregateInputType | true
    _avg?: KeywordAvgAggregateInputType
    _sum?: KeywordSumAggregateInputType
    _min?: KeywordMinAggregateInputType
    _max?: KeywordMaxAggregateInputType
  }

  export type KeywordGroupByOutputType = {
    keywordId: number
    keywordName: string
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  type GetKeywordGroupByPayload<T extends KeywordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordGroupByOutputType[P]>
        }
      >
    >


  export type KeywordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    keywordId?: boolean
    keywordName?: boolean
    activityKeywords?: boolean | Keyword$activityKeywordsArgs<ExtArgs>
    _count?: boolean | KeywordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyword"]>

  export type KeywordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    keywordId?: boolean
    keywordName?: boolean
  }, ExtArgs["result"]["keyword"]>

  export type KeywordSelectScalar = {
    keywordId?: boolean
    keywordName?: boolean
  }

  export type KeywordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityKeywords?: boolean | Keyword$activityKeywordsArgs<ExtArgs>
    _count?: boolean | KeywordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KeywordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $KeywordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Keyword"
    objects: {
      activityKeywords: Prisma.$ActivityKeywordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      keywordId: number
      keywordName: string
    }, ExtArgs["result"]["keyword"]>
    composites: {}
  }

  type KeywordGetPayload<S extends boolean | null | undefined | KeywordDefaultArgs> = $Result.GetResult<Prisma.$KeywordPayload, S>

  type KeywordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KeywordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KeywordCountAggregateInputType | true
    }

  export interface KeywordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Keyword'], meta: { name: 'Keyword' } }
    /**
     * Find zero or one Keyword that matches the filter.
     * @param {KeywordFindUniqueArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeywordFindUniqueArgs>(args: SelectSubset<T, KeywordFindUniqueArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Keyword that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KeywordFindUniqueOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeywordFindUniqueOrThrowArgs>(args: SelectSubset<T, KeywordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Keyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeywordFindFirstArgs>(args?: SelectSubset<T, KeywordFindFirstArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Keyword that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeywordFindFirstOrThrowArgs>(args?: SelectSubset<T, KeywordFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Keywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keywords
     * const keywords = await prisma.keyword.findMany()
     * 
     * // Get first 10 Keywords
     * const keywords = await prisma.keyword.findMany({ take: 10 })
     * 
     * // Only select the `keywordId`
     * const keywordWithKeywordIdOnly = await prisma.keyword.findMany({ select: { keywordId: true } })
     * 
     */
    findMany<T extends KeywordFindManyArgs>(args?: SelectSubset<T, KeywordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Keyword.
     * @param {KeywordCreateArgs} args - Arguments to create a Keyword.
     * @example
     * // Create one Keyword
     * const Keyword = await prisma.keyword.create({
     *   data: {
     *     // ... data to create a Keyword
     *   }
     * })
     * 
     */
    create<T extends KeywordCreateArgs>(args: SelectSubset<T, KeywordCreateArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Keywords.
     * @param {KeywordCreateManyArgs} args - Arguments to create many Keywords.
     * @example
     * // Create many Keywords
     * const keyword = await prisma.keyword.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeywordCreateManyArgs>(args?: SelectSubset<T, KeywordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Keywords and returns the data saved in the database.
     * @param {KeywordCreateManyAndReturnArgs} args - Arguments to create many Keywords.
     * @example
     * // Create many Keywords
     * const keyword = await prisma.keyword.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Keywords and only return the `keywordId`
     * const keywordWithKeywordIdOnly = await prisma.keyword.createManyAndReturn({ 
     *   select: { keywordId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeywordCreateManyAndReturnArgs>(args?: SelectSubset<T, KeywordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Keyword.
     * @param {KeywordDeleteArgs} args - Arguments to delete one Keyword.
     * @example
     * // Delete one Keyword
     * const Keyword = await prisma.keyword.delete({
     *   where: {
     *     // ... filter to delete one Keyword
     *   }
     * })
     * 
     */
    delete<T extends KeywordDeleteArgs>(args: SelectSubset<T, KeywordDeleteArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Keyword.
     * @param {KeywordUpdateArgs} args - Arguments to update one Keyword.
     * @example
     * // Update one Keyword
     * const keyword = await prisma.keyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeywordUpdateArgs>(args: SelectSubset<T, KeywordUpdateArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Keywords.
     * @param {KeywordDeleteManyArgs} args - Arguments to filter Keywords to delete.
     * @example
     * // Delete a few Keywords
     * const { count } = await prisma.keyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeywordDeleteManyArgs>(args?: SelectSubset<T, KeywordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeywordUpdateManyArgs>(args: SelectSubset<T, KeywordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Keyword.
     * @param {KeywordUpsertArgs} args - Arguments to update or create a Keyword.
     * @example
     * // Update or create a Keyword
     * const keyword = await prisma.keyword.upsert({
     *   create: {
     *     // ... data to create a Keyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyword we want to update
     *   }
     * })
     */
    upsert<T extends KeywordUpsertArgs>(args: SelectSubset<T, KeywordUpsertArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordCountArgs} args - Arguments to filter Keywords to count.
     * @example
     * // Count the number of Keywords
     * const count = await prisma.keyword.count({
     *   where: {
     *     // ... the filter for the Keywords we want to count
     *   }
     * })
    **/
    count<T extends KeywordCountArgs>(
      args?: Subset<T, KeywordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordAggregateArgs>(args: Subset<T, KeywordAggregateArgs>): Prisma.PrismaPromise<GetKeywordAggregateType<T>>

    /**
     * Group by Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordGroupByArgs['orderBy'] }
        : { orderBy?: KeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Keyword model
   */
  readonly fields: KeywordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeywordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityKeywords<T extends Keyword$activityKeywordsArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$activityKeywordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Keyword model
   */ 
  interface KeywordFieldRefs {
    readonly keywordId: FieldRef<"Keyword", 'Int'>
    readonly keywordName: FieldRef<"Keyword", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Keyword findUnique
   */
  export type KeywordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword findUniqueOrThrow
   */
  export type KeywordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword findFirst
   */
  export type KeywordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     */
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword findFirstOrThrow
   */
  export type KeywordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     */
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword findMany
   */
  export type KeywordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keywords to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword create
   */
  export type KeywordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The data needed to create a Keyword.
     */
    data: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
  }

  /**
   * Keyword createMany
   */
  export type KeywordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keywords.
     */
    data: KeywordCreateManyInput | KeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Keyword createManyAndReturn
   */
  export type KeywordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Keywords.
     */
    data: KeywordCreateManyInput | KeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Keyword update
   */
  export type KeywordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The data needed to update a Keyword.
     */
    data: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
    /**
     * Choose, which Keyword to update.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword updateMany
   */
  export type KeywordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keywords.
     */
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     */
    where?: KeywordWhereInput
  }

  /**
   * Keyword upsert
   */
  export type KeywordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The filter to search for the Keyword to update in case it exists.
     */
    where: KeywordWhereUniqueInput
    /**
     * In case the Keyword found by the `where` argument doesn't exist, create a new Keyword with this data.
     */
    create: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
    /**
     * In case the Keyword was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
  }

  /**
   * Keyword delete
   */
  export type KeywordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter which Keyword to delete.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword deleteMany
   */
  export type KeywordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keywords to delete
     */
    where?: KeywordWhereInput
  }

  /**
   * Keyword.activityKeywords
   */
  export type Keyword$activityKeywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    where?: ActivityKeywordWhereInput
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    cursor?: ActivityKeywordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityKeywordScalarFieldEnum | ActivityKeywordScalarFieldEnum[]
  }

  /**
   * Keyword without action
   */
  export type KeywordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
  }


  /**
   * Model ActivityKeyword
   */

  export type AggregateActivityKeyword = {
    _count: ActivityKeywordCountAggregateOutputType | null
    _avg: ActivityKeywordAvgAggregateOutputType | null
    _sum: ActivityKeywordSumAggregateOutputType | null
    _min: ActivityKeywordMinAggregateOutputType | null
    _max: ActivityKeywordMaxAggregateOutputType | null
  }

  export type ActivityKeywordAvgAggregateOutputType = {
    activityId: number | null
    keywordId: number | null
  }

  export type ActivityKeywordSumAggregateOutputType = {
    activityId: number | null
    keywordId: number | null
  }

  export type ActivityKeywordMinAggregateOutputType = {
    activityId: number | null
    keywordId: number | null
  }

  export type ActivityKeywordMaxAggregateOutputType = {
    activityId: number | null
    keywordId: number | null
  }

  export type ActivityKeywordCountAggregateOutputType = {
    activityId: number
    keywordId: number
    _all: number
  }


  export type ActivityKeywordAvgAggregateInputType = {
    activityId?: true
    keywordId?: true
  }

  export type ActivityKeywordSumAggregateInputType = {
    activityId?: true
    keywordId?: true
  }

  export type ActivityKeywordMinAggregateInputType = {
    activityId?: true
    keywordId?: true
  }

  export type ActivityKeywordMaxAggregateInputType = {
    activityId?: true
    keywordId?: true
  }

  export type ActivityKeywordCountAggregateInputType = {
    activityId?: true
    keywordId?: true
    _all?: true
  }

  export type ActivityKeywordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityKeyword to aggregate.
     */
    where?: ActivityKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityKeywords to fetch.
     */
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityKeywords
    **/
    _count?: true | ActivityKeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityKeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityKeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityKeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityKeywordMaxAggregateInputType
  }

  export type GetActivityKeywordAggregateType<T extends ActivityKeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityKeyword[P]>
      : GetScalarType<T[P], AggregateActivityKeyword[P]>
  }




  export type ActivityKeywordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityKeywordWhereInput
    orderBy?: ActivityKeywordOrderByWithAggregationInput | ActivityKeywordOrderByWithAggregationInput[]
    by: ActivityKeywordScalarFieldEnum[] | ActivityKeywordScalarFieldEnum
    having?: ActivityKeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityKeywordCountAggregateInputType | true
    _avg?: ActivityKeywordAvgAggregateInputType
    _sum?: ActivityKeywordSumAggregateInputType
    _min?: ActivityKeywordMinAggregateInputType
    _max?: ActivityKeywordMaxAggregateInputType
  }

  export type ActivityKeywordGroupByOutputType = {
    activityId: number
    keywordId: number
    _count: ActivityKeywordCountAggregateOutputType | null
    _avg: ActivityKeywordAvgAggregateOutputType | null
    _sum: ActivityKeywordSumAggregateOutputType | null
    _min: ActivityKeywordMinAggregateOutputType | null
    _max: ActivityKeywordMaxAggregateOutputType | null
  }

  type GetActivityKeywordGroupByPayload<T extends ActivityKeywordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityKeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityKeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityKeywordGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityKeywordGroupByOutputType[P]>
        }
      >
    >


  export type ActivityKeywordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    keywordId?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityKeyword"]>

  export type ActivityKeywordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    keywordId?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityKeyword"]>

  export type ActivityKeywordSelectScalar = {
    activityId?: boolean
    keywordId?: boolean
  }

  export type ActivityKeywordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type ActivityKeywordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }

  export type $ActivityKeywordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityKeyword"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      keyword: Prisma.$KeywordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      activityId: number
      keywordId: number
    }, ExtArgs["result"]["activityKeyword"]>
    composites: {}
  }

  type ActivityKeywordGetPayload<S extends boolean | null | undefined | ActivityKeywordDefaultArgs> = $Result.GetResult<Prisma.$ActivityKeywordPayload, S>

  type ActivityKeywordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityKeywordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityKeywordCountAggregateInputType | true
    }

  export interface ActivityKeywordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityKeyword'], meta: { name: 'ActivityKeyword' } }
    /**
     * Find zero or one ActivityKeyword that matches the filter.
     * @param {ActivityKeywordFindUniqueArgs} args - Arguments to find a ActivityKeyword
     * @example
     * // Get one ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityKeywordFindUniqueArgs>(args: SelectSubset<T, ActivityKeywordFindUniqueArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActivityKeyword that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityKeywordFindUniqueOrThrowArgs} args - Arguments to find a ActivityKeyword
     * @example
     * // Get one ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityKeywordFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityKeywordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActivityKeyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordFindFirstArgs} args - Arguments to find a ActivityKeyword
     * @example
     * // Get one ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityKeywordFindFirstArgs>(args?: SelectSubset<T, ActivityKeywordFindFirstArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActivityKeyword that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordFindFirstOrThrowArgs} args - Arguments to find a ActivityKeyword
     * @example
     * // Get one ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityKeywordFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityKeywordFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActivityKeywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityKeywords
     * const activityKeywords = await prisma.activityKeyword.findMany()
     * 
     * // Get first 10 ActivityKeywords
     * const activityKeywords = await prisma.activityKeyword.findMany({ take: 10 })
     * 
     * // Only select the `activityId`
     * const activityKeywordWithActivityIdOnly = await prisma.activityKeyword.findMany({ select: { activityId: true } })
     * 
     */
    findMany<T extends ActivityKeywordFindManyArgs>(args?: SelectSubset<T, ActivityKeywordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActivityKeyword.
     * @param {ActivityKeywordCreateArgs} args - Arguments to create a ActivityKeyword.
     * @example
     * // Create one ActivityKeyword
     * const ActivityKeyword = await prisma.activityKeyword.create({
     *   data: {
     *     // ... data to create a ActivityKeyword
     *   }
     * })
     * 
     */
    create<T extends ActivityKeywordCreateArgs>(args: SelectSubset<T, ActivityKeywordCreateArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActivityKeywords.
     * @param {ActivityKeywordCreateManyArgs} args - Arguments to create many ActivityKeywords.
     * @example
     * // Create many ActivityKeywords
     * const activityKeyword = await prisma.activityKeyword.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityKeywordCreateManyArgs>(args?: SelectSubset<T, ActivityKeywordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityKeywords and returns the data saved in the database.
     * @param {ActivityKeywordCreateManyAndReturnArgs} args - Arguments to create many ActivityKeywords.
     * @example
     * // Create many ActivityKeywords
     * const activityKeyword = await prisma.activityKeyword.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityKeywords and only return the `activityId`
     * const activityKeywordWithActivityIdOnly = await prisma.activityKeyword.createManyAndReturn({ 
     *   select: { activityId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityKeywordCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityKeywordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ActivityKeyword.
     * @param {ActivityKeywordDeleteArgs} args - Arguments to delete one ActivityKeyword.
     * @example
     * // Delete one ActivityKeyword
     * const ActivityKeyword = await prisma.activityKeyword.delete({
     *   where: {
     *     // ... filter to delete one ActivityKeyword
     *   }
     * })
     * 
     */
    delete<T extends ActivityKeywordDeleteArgs>(args: SelectSubset<T, ActivityKeywordDeleteArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActivityKeyword.
     * @param {ActivityKeywordUpdateArgs} args - Arguments to update one ActivityKeyword.
     * @example
     * // Update one ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityKeywordUpdateArgs>(args: SelectSubset<T, ActivityKeywordUpdateArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActivityKeywords.
     * @param {ActivityKeywordDeleteManyArgs} args - Arguments to filter ActivityKeywords to delete.
     * @example
     * // Delete a few ActivityKeywords
     * const { count } = await prisma.activityKeyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityKeywordDeleteManyArgs>(args?: SelectSubset<T, ActivityKeywordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityKeywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityKeywords
     * const activityKeyword = await prisma.activityKeyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityKeywordUpdateManyArgs>(args: SelectSubset<T, ActivityKeywordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityKeyword.
     * @param {ActivityKeywordUpsertArgs} args - Arguments to update or create a ActivityKeyword.
     * @example
     * // Update or create a ActivityKeyword
     * const activityKeyword = await prisma.activityKeyword.upsert({
     *   create: {
     *     // ... data to create a ActivityKeyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityKeyword we want to update
     *   }
     * })
     */
    upsert<T extends ActivityKeywordUpsertArgs>(args: SelectSubset<T, ActivityKeywordUpsertArgs<ExtArgs>>): Prisma__ActivityKeywordClient<$Result.GetResult<Prisma.$ActivityKeywordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActivityKeywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordCountArgs} args - Arguments to filter ActivityKeywords to count.
     * @example
     * // Count the number of ActivityKeywords
     * const count = await prisma.activityKeyword.count({
     *   where: {
     *     // ... the filter for the ActivityKeywords we want to count
     *   }
     * })
    **/
    count<T extends ActivityKeywordCountArgs>(
      args?: Subset<T, ActivityKeywordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityKeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityKeyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityKeywordAggregateArgs>(args: Subset<T, ActivityKeywordAggregateArgs>): Prisma.PrismaPromise<GetActivityKeywordAggregateType<T>>

    /**
     * Group by ActivityKeyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityKeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityKeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityKeywordGroupByArgs['orderBy'] }
        : { orderBy?: ActivityKeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityKeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityKeywordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityKeyword model
   */
  readonly fields: ActivityKeywordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityKeyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityKeywordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    keyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityKeyword model
   */ 
  interface ActivityKeywordFieldRefs {
    readonly activityId: FieldRef<"ActivityKeyword", 'Int'>
    readonly keywordId: FieldRef<"ActivityKeyword", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ActivityKeyword findUnique
   */
  export type ActivityKeywordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter, which ActivityKeyword to fetch.
     */
    where: ActivityKeywordWhereUniqueInput
  }

  /**
   * ActivityKeyword findUniqueOrThrow
   */
  export type ActivityKeywordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter, which ActivityKeyword to fetch.
     */
    where: ActivityKeywordWhereUniqueInput
  }

  /**
   * ActivityKeyword findFirst
   */
  export type ActivityKeywordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter, which ActivityKeyword to fetch.
     */
    where?: ActivityKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityKeywords to fetch.
     */
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityKeywords.
     */
    cursor?: ActivityKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityKeywords.
     */
    distinct?: ActivityKeywordScalarFieldEnum | ActivityKeywordScalarFieldEnum[]
  }

  /**
   * ActivityKeyword findFirstOrThrow
   */
  export type ActivityKeywordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter, which ActivityKeyword to fetch.
     */
    where?: ActivityKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityKeywords to fetch.
     */
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityKeywords.
     */
    cursor?: ActivityKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityKeywords.
     */
    distinct?: ActivityKeywordScalarFieldEnum | ActivityKeywordScalarFieldEnum[]
  }

  /**
   * ActivityKeyword findMany
   */
  export type ActivityKeywordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter, which ActivityKeywords to fetch.
     */
    where?: ActivityKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityKeywords to fetch.
     */
    orderBy?: ActivityKeywordOrderByWithRelationInput | ActivityKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityKeywords.
     */
    cursor?: ActivityKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityKeywords.
     */
    skip?: number
    distinct?: ActivityKeywordScalarFieldEnum | ActivityKeywordScalarFieldEnum[]
  }

  /**
   * ActivityKeyword create
   */
  export type ActivityKeywordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityKeyword.
     */
    data: XOR<ActivityKeywordCreateInput, ActivityKeywordUncheckedCreateInput>
  }

  /**
   * ActivityKeyword createMany
   */
  export type ActivityKeywordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityKeywords.
     */
    data: ActivityKeywordCreateManyInput | ActivityKeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityKeyword createManyAndReturn
   */
  export type ActivityKeywordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ActivityKeywords.
     */
    data: ActivityKeywordCreateManyInput | ActivityKeywordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityKeyword update
   */
  export type ActivityKeywordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityKeyword.
     */
    data: XOR<ActivityKeywordUpdateInput, ActivityKeywordUncheckedUpdateInput>
    /**
     * Choose, which ActivityKeyword to update.
     */
    where: ActivityKeywordWhereUniqueInput
  }

  /**
   * ActivityKeyword updateMany
   */
  export type ActivityKeywordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityKeywords.
     */
    data: XOR<ActivityKeywordUpdateManyMutationInput, ActivityKeywordUncheckedUpdateManyInput>
    /**
     * Filter which ActivityKeywords to update
     */
    where?: ActivityKeywordWhereInput
  }

  /**
   * ActivityKeyword upsert
   */
  export type ActivityKeywordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityKeyword to update in case it exists.
     */
    where: ActivityKeywordWhereUniqueInput
    /**
     * In case the ActivityKeyword found by the `where` argument doesn't exist, create a new ActivityKeyword with this data.
     */
    create: XOR<ActivityKeywordCreateInput, ActivityKeywordUncheckedCreateInput>
    /**
     * In case the ActivityKeyword was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityKeywordUpdateInput, ActivityKeywordUncheckedUpdateInput>
  }

  /**
   * ActivityKeyword delete
   */
  export type ActivityKeywordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
    /**
     * Filter which ActivityKeyword to delete.
     */
    where: ActivityKeywordWhereUniqueInput
  }

  /**
   * ActivityKeyword deleteMany
   */
  export type ActivityKeywordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityKeywords to delete
     */
    where?: ActivityKeywordWhereInput
  }

  /**
   * ActivityKeyword without action
   */
  export type ActivityKeywordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityKeyword
     */
    select?: ActivityKeywordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityKeywordInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLocation
   */

  export type AggregateActivityLocation = {
    _count: ActivityLocationCountAggregateOutputType | null
    _avg: ActivityLocationAvgAggregateOutputType | null
    _sum: ActivityLocationSumAggregateOutputType | null
    _min: ActivityLocationMinAggregateOutputType | null
    _max: ActivityLocationMaxAggregateOutputType | null
  }

  export type ActivityLocationAvgAggregateOutputType = {
    locationId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ActivityLocationSumAggregateOutputType = {
    locationId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ActivityLocationMinAggregateOutputType = {
    locationId: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
  }

  export type ActivityLocationMaxAggregateOutputType = {
    locationId: number | null
    name: string | null
    latitude: number | null
    longitude: number | null
  }

  export type ActivityLocationCountAggregateOutputType = {
    locationId: number
    name: number
    latitude: number
    longitude: number
    _all: number
  }


  export type ActivityLocationAvgAggregateInputType = {
    locationId?: true
    latitude?: true
    longitude?: true
  }

  export type ActivityLocationSumAggregateInputType = {
    locationId?: true
    latitude?: true
    longitude?: true
  }

  export type ActivityLocationMinAggregateInputType = {
    locationId?: true
    name?: true
    latitude?: true
    longitude?: true
  }

  export type ActivityLocationMaxAggregateInputType = {
    locationId?: true
    name?: true
    latitude?: true
    longitude?: true
  }

  export type ActivityLocationCountAggregateInputType = {
    locationId?: true
    name?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type ActivityLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLocation to aggregate.
     */
    where?: ActivityLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLocations to fetch.
     */
    orderBy?: ActivityLocationOrderByWithRelationInput | ActivityLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLocations
    **/
    _count?: true | ActivityLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLocationMaxAggregateInputType
  }

  export type GetActivityLocationAggregateType<T extends ActivityLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLocation[P]>
      : GetScalarType<T[P], AggregateActivityLocation[P]>
  }




  export type ActivityLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLocationWhereInput
    orderBy?: ActivityLocationOrderByWithAggregationInput | ActivityLocationOrderByWithAggregationInput[]
    by: ActivityLocationScalarFieldEnum[] | ActivityLocationScalarFieldEnum
    having?: ActivityLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLocationCountAggregateInputType | true
    _avg?: ActivityLocationAvgAggregateInputType
    _sum?: ActivityLocationSumAggregateInputType
    _min?: ActivityLocationMinAggregateInputType
    _max?: ActivityLocationMaxAggregateInputType
  }

  export type ActivityLocationGroupByOutputType = {
    locationId: number
    name: string
    latitude: number
    longitude: number
    _count: ActivityLocationCountAggregateOutputType | null
    _avg: ActivityLocationAvgAggregateOutputType | null
    _sum: ActivityLocationSumAggregateOutputType | null
    _min: ActivityLocationMinAggregateOutputType | null
    _max: ActivityLocationMaxAggregateOutputType | null
  }

  type GetActivityLocationGroupByPayload<T extends ActivityLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLocationGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLocationGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    locationId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    recommendations?: boolean | ActivityLocation$recommendationsArgs<ExtArgs>
    _count?: boolean | ActivityLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLocation"]>

  export type ActivityLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    locationId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
  }, ExtArgs["result"]["activityLocation"]>

  export type ActivityLocationSelectScalar = {
    locationId?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type ActivityLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recommendations?: boolean | ActivityLocation$recommendationsArgs<ExtArgs>
    _count?: boolean | ActivityLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ActivityLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLocation"
    objects: {
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      locationId: number
      name: string
      latitude: number
      longitude: number
    }, ExtArgs["result"]["activityLocation"]>
    composites: {}
  }

  type ActivityLocationGetPayload<S extends boolean | null | undefined | ActivityLocationDefaultArgs> = $Result.GetResult<Prisma.$ActivityLocationPayload, S>

  type ActivityLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityLocationCountAggregateInputType | true
    }

  export interface ActivityLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLocation'], meta: { name: 'ActivityLocation' } }
    /**
     * Find zero or one ActivityLocation that matches the filter.
     * @param {ActivityLocationFindUniqueArgs} args - Arguments to find a ActivityLocation
     * @example
     * // Get one ActivityLocation
     * const activityLocation = await prisma.activityLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLocationFindUniqueArgs>(args: SelectSubset<T, ActivityLocationFindUniqueArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActivityLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivityLocationFindUniqueOrThrowArgs} args - Arguments to find a ActivityLocation
     * @example
     * // Get one ActivityLocation
     * const activityLocation = await prisma.activityLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActivityLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationFindFirstArgs} args - Arguments to find a ActivityLocation
     * @example
     * // Get one ActivityLocation
     * const activityLocation = await prisma.activityLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLocationFindFirstArgs>(args?: SelectSubset<T, ActivityLocationFindFirstArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActivityLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationFindFirstOrThrowArgs} args - Arguments to find a ActivityLocation
     * @example
     * // Get one ActivityLocation
     * const activityLocation = await prisma.activityLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActivityLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLocations
     * const activityLocations = await prisma.activityLocation.findMany()
     * 
     * // Get first 10 ActivityLocations
     * const activityLocations = await prisma.activityLocation.findMany({ take: 10 })
     * 
     * // Only select the `locationId`
     * const activityLocationWithLocationIdOnly = await prisma.activityLocation.findMany({ select: { locationId: true } })
     * 
     */
    findMany<T extends ActivityLocationFindManyArgs>(args?: SelectSubset<T, ActivityLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActivityLocation.
     * @param {ActivityLocationCreateArgs} args - Arguments to create a ActivityLocation.
     * @example
     * // Create one ActivityLocation
     * const ActivityLocation = await prisma.activityLocation.create({
     *   data: {
     *     // ... data to create a ActivityLocation
     *   }
     * })
     * 
     */
    create<T extends ActivityLocationCreateArgs>(args: SelectSubset<T, ActivityLocationCreateArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActivityLocations.
     * @param {ActivityLocationCreateManyArgs} args - Arguments to create many ActivityLocations.
     * @example
     * // Create many ActivityLocations
     * const activityLocation = await prisma.activityLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLocationCreateManyArgs>(args?: SelectSubset<T, ActivityLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLocations and returns the data saved in the database.
     * @param {ActivityLocationCreateManyAndReturnArgs} args - Arguments to create many ActivityLocations.
     * @example
     * // Create many ActivityLocations
     * const activityLocation = await prisma.activityLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLocations and only return the `locationId`
     * const activityLocationWithLocationIdOnly = await prisma.activityLocation.createManyAndReturn({ 
     *   select: { locationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ActivityLocation.
     * @param {ActivityLocationDeleteArgs} args - Arguments to delete one ActivityLocation.
     * @example
     * // Delete one ActivityLocation
     * const ActivityLocation = await prisma.activityLocation.delete({
     *   where: {
     *     // ... filter to delete one ActivityLocation
     *   }
     * })
     * 
     */
    delete<T extends ActivityLocationDeleteArgs>(args: SelectSubset<T, ActivityLocationDeleteArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActivityLocation.
     * @param {ActivityLocationUpdateArgs} args - Arguments to update one ActivityLocation.
     * @example
     * // Update one ActivityLocation
     * const activityLocation = await prisma.activityLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLocationUpdateArgs>(args: SelectSubset<T, ActivityLocationUpdateArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActivityLocations.
     * @param {ActivityLocationDeleteManyArgs} args - Arguments to filter ActivityLocations to delete.
     * @example
     * // Delete a few ActivityLocations
     * const { count } = await prisma.activityLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLocationDeleteManyArgs>(args?: SelectSubset<T, ActivityLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLocations
     * const activityLocation = await prisma.activityLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLocationUpdateManyArgs>(args: SelectSubset<T, ActivityLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityLocation.
     * @param {ActivityLocationUpsertArgs} args - Arguments to update or create a ActivityLocation.
     * @example
     * // Update or create a ActivityLocation
     * const activityLocation = await prisma.activityLocation.upsert({
     *   create: {
     *     // ... data to create a ActivityLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLocation we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLocationUpsertArgs>(args: SelectSubset<T, ActivityLocationUpsertArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActivityLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationCountArgs} args - Arguments to filter ActivityLocations to count.
     * @example
     * // Count the number of ActivityLocations
     * const count = await prisma.activityLocation.count({
     *   where: {
     *     // ... the filter for the ActivityLocations we want to count
     *   }
     * })
    **/
    count<T extends ActivityLocationCountArgs>(
      args?: Subset<T, ActivityLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLocationAggregateArgs>(args: Subset<T, ActivityLocationAggregateArgs>): Prisma.PrismaPromise<GetActivityLocationAggregateType<T>>

    /**
     * Group by ActivityLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLocationGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLocation model
   */
  readonly fields: ActivityLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recommendations<T extends ActivityLocation$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLocation$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLocation model
   */ 
  interface ActivityLocationFieldRefs {
    readonly locationId: FieldRef<"ActivityLocation", 'Int'>
    readonly name: FieldRef<"ActivityLocation", 'String'>
    readonly latitude: FieldRef<"ActivityLocation", 'Float'>
    readonly longitude: FieldRef<"ActivityLocation", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLocation findUnique
   */
  export type ActivityLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLocation to fetch.
     */
    where: ActivityLocationWhereUniqueInput
  }

  /**
   * ActivityLocation findUniqueOrThrow
   */
  export type ActivityLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLocation to fetch.
     */
    where: ActivityLocationWhereUniqueInput
  }

  /**
   * ActivityLocation findFirst
   */
  export type ActivityLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLocation to fetch.
     */
    where?: ActivityLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLocations to fetch.
     */
    orderBy?: ActivityLocationOrderByWithRelationInput | ActivityLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLocations.
     */
    cursor?: ActivityLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLocations.
     */
    distinct?: ActivityLocationScalarFieldEnum | ActivityLocationScalarFieldEnum[]
  }

  /**
   * ActivityLocation findFirstOrThrow
   */
  export type ActivityLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLocation to fetch.
     */
    where?: ActivityLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLocations to fetch.
     */
    orderBy?: ActivityLocationOrderByWithRelationInput | ActivityLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLocations.
     */
    cursor?: ActivityLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLocations.
     */
    distinct?: ActivityLocationScalarFieldEnum | ActivityLocationScalarFieldEnum[]
  }

  /**
   * ActivityLocation findMany
   */
  export type ActivityLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLocations to fetch.
     */
    where?: ActivityLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLocations to fetch.
     */
    orderBy?: ActivityLocationOrderByWithRelationInput | ActivityLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLocations.
     */
    cursor?: ActivityLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLocations.
     */
    skip?: number
    distinct?: ActivityLocationScalarFieldEnum | ActivityLocationScalarFieldEnum[]
  }

  /**
   * ActivityLocation create
   */
  export type ActivityLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLocation.
     */
    data: XOR<ActivityLocationCreateInput, ActivityLocationUncheckedCreateInput>
  }

  /**
   * ActivityLocation createMany
   */
  export type ActivityLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLocations.
     */
    data: ActivityLocationCreateManyInput | ActivityLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLocation createManyAndReturn
   */
  export type ActivityLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ActivityLocations.
     */
    data: ActivityLocationCreateManyInput | ActivityLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLocation update
   */
  export type ActivityLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLocation.
     */
    data: XOR<ActivityLocationUpdateInput, ActivityLocationUncheckedUpdateInput>
    /**
     * Choose, which ActivityLocation to update.
     */
    where: ActivityLocationWhereUniqueInput
  }

  /**
   * ActivityLocation updateMany
   */
  export type ActivityLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLocations.
     */
    data: XOR<ActivityLocationUpdateManyMutationInput, ActivityLocationUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLocations to update
     */
    where?: ActivityLocationWhereInput
  }

  /**
   * ActivityLocation upsert
   */
  export type ActivityLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLocation to update in case it exists.
     */
    where: ActivityLocationWhereUniqueInput
    /**
     * In case the ActivityLocation found by the `where` argument doesn't exist, create a new ActivityLocation with this data.
     */
    create: XOR<ActivityLocationCreateInput, ActivityLocationUncheckedCreateInput>
    /**
     * In case the ActivityLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLocationUpdateInput, ActivityLocationUncheckedUpdateInput>
  }

  /**
   * ActivityLocation delete
   */
  export type ActivityLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
    /**
     * Filter which ActivityLocation to delete.
     */
    where: ActivityLocationWhereUniqueInput
  }

  /**
   * ActivityLocation deleteMany
   */
  export type ActivityLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLocations to delete
     */
    where?: ActivityLocationWhereInput
  }

  /**
   * ActivityLocation.recommendations
   */
  export type ActivityLocation$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * ActivityLocation without action
   */
  export type ActivityLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLocation
     */
    select?: ActivityLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLocationInclude<ExtArgs> | null
  }


  /**
   * Model UserLocation
   */

  export type AggregateUserLocation = {
    _count: UserLocationCountAggregateOutputType | null
    _avg: UserLocationAvgAggregateOutputType | null
    _sum: UserLocationSumAggregateOutputType | null
    _min: UserLocationMinAggregateOutputType | null
    _max: UserLocationMaxAggregateOutputType | null
  }

  export type UserLocationAvgAggregateOutputType = {
    userLocationId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type UserLocationSumAggregateOutputType = {
    userLocationId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type UserLocationMinAggregateOutputType = {
    userLocationId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type UserLocationMaxAggregateOutputType = {
    userLocationId: number | null
    userId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type UserLocationCountAggregateOutputType = {
    userLocationId: number
    userId: number
    latitude: number
    longitude: number
    _all: number
  }


  export type UserLocationAvgAggregateInputType = {
    userLocationId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type UserLocationSumAggregateInputType = {
    userLocationId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type UserLocationMinAggregateInputType = {
    userLocationId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type UserLocationMaxAggregateInputType = {
    userLocationId?: true
    userId?: true
    latitude?: true
    longitude?: true
  }

  export type UserLocationCountAggregateInputType = {
    userLocationId?: true
    userId?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type UserLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLocation to aggregate.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLocations
    **/
    _count?: true | UserLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLocationMaxAggregateInputType
  }

  export type GetUserLocationAggregateType<T extends UserLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLocation[P]>
      : GetScalarType<T[P], AggregateUserLocation[P]>
  }




  export type UserLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLocationWhereInput
    orderBy?: UserLocationOrderByWithAggregationInput | UserLocationOrderByWithAggregationInput[]
    by: UserLocationScalarFieldEnum[] | UserLocationScalarFieldEnum
    having?: UserLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLocationCountAggregateInputType | true
    _avg?: UserLocationAvgAggregateInputType
    _sum?: UserLocationSumAggregateInputType
    _min?: UserLocationMinAggregateInputType
    _max?: UserLocationMaxAggregateInputType
  }

  export type UserLocationGroupByOutputType = {
    userLocationId: number
    userId: number
    latitude: number
    longitude: number
    _count: UserLocationCountAggregateOutputType | null
    _avg: UserLocationAvgAggregateOutputType | null
    _sum: UserLocationSumAggregateOutputType | null
    _min: UserLocationMinAggregateOutputType | null
    _max: UserLocationMaxAggregateOutputType | null
  }

  type GetUserLocationGroupByPayload<T extends UserLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLocationGroupByOutputType[P]>
            : GetScalarType<T[P], UserLocationGroupByOutputType[P]>
        }
      >
    >


  export type UserLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userLocationId?: boolean
    userId?: boolean
    latitude?: boolean
    longitude?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recommendations?: boolean | UserLocation$recommendationsArgs<ExtArgs>
    _count?: boolean | UserLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLocation"]>

  export type UserLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userLocationId?: boolean
    userId?: boolean
    latitude?: boolean
    longitude?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLocation"]>

  export type UserLocationSelectScalar = {
    userLocationId?: boolean
    userId?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type UserLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recommendations?: boolean | UserLocation$recommendationsArgs<ExtArgs>
    _count?: boolean | UserLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLocation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userLocationId: number
      userId: number
      latitude: number
      longitude: number
    }, ExtArgs["result"]["userLocation"]>
    composites: {}
  }

  type UserLocationGetPayload<S extends boolean | null | undefined | UserLocationDefaultArgs> = $Result.GetResult<Prisma.$UserLocationPayload, S>

  type UserLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLocationCountAggregateInputType | true
    }

  export interface UserLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLocation'], meta: { name: 'UserLocation' } }
    /**
     * Find zero or one UserLocation that matches the filter.
     * @param {UserLocationFindUniqueArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLocationFindUniqueArgs>(args: SelectSubset<T, UserLocationFindUniqueArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLocationFindUniqueOrThrowArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindFirstArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLocationFindFirstArgs>(args?: SelectSubset<T, UserLocationFindFirstArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindFirstOrThrowArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLocations
     * const userLocations = await prisma.userLocation.findMany()
     * 
     * // Get first 10 UserLocations
     * const userLocations = await prisma.userLocation.findMany({ take: 10 })
     * 
     * // Only select the `userLocationId`
     * const userLocationWithUserLocationIdOnly = await prisma.userLocation.findMany({ select: { userLocationId: true } })
     * 
     */
    findMany<T extends UserLocationFindManyArgs>(args?: SelectSubset<T, UserLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLocation.
     * @param {UserLocationCreateArgs} args - Arguments to create a UserLocation.
     * @example
     * // Create one UserLocation
     * const UserLocation = await prisma.userLocation.create({
     *   data: {
     *     // ... data to create a UserLocation
     *   }
     * })
     * 
     */
    create<T extends UserLocationCreateArgs>(args: SelectSubset<T, UserLocationCreateArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLocations.
     * @param {UserLocationCreateManyArgs} args - Arguments to create many UserLocations.
     * @example
     * // Create many UserLocations
     * const userLocation = await prisma.userLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLocationCreateManyArgs>(args?: SelectSubset<T, UserLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLocations and returns the data saved in the database.
     * @param {UserLocationCreateManyAndReturnArgs} args - Arguments to create many UserLocations.
     * @example
     * // Create many UserLocations
     * const userLocation = await prisma.userLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLocations and only return the `userLocationId`
     * const userLocationWithUserLocationIdOnly = await prisma.userLocation.createManyAndReturn({ 
     *   select: { userLocationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserLocation.
     * @param {UserLocationDeleteArgs} args - Arguments to delete one UserLocation.
     * @example
     * // Delete one UserLocation
     * const UserLocation = await prisma.userLocation.delete({
     *   where: {
     *     // ... filter to delete one UserLocation
     *   }
     * })
     * 
     */
    delete<T extends UserLocationDeleteArgs>(args: SelectSubset<T, UserLocationDeleteArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLocation.
     * @param {UserLocationUpdateArgs} args - Arguments to update one UserLocation.
     * @example
     * // Update one UserLocation
     * const userLocation = await prisma.userLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLocationUpdateArgs>(args: SelectSubset<T, UserLocationUpdateArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLocations.
     * @param {UserLocationDeleteManyArgs} args - Arguments to filter UserLocations to delete.
     * @example
     * // Delete a few UserLocations
     * const { count } = await prisma.userLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLocationDeleteManyArgs>(args?: SelectSubset<T, UserLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLocations
     * const userLocation = await prisma.userLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLocationUpdateManyArgs>(args: SelectSubset<T, UserLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLocation.
     * @param {UserLocationUpsertArgs} args - Arguments to update or create a UserLocation.
     * @example
     * // Update or create a UserLocation
     * const userLocation = await prisma.userLocation.upsert({
     *   create: {
     *     // ... data to create a UserLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLocation we want to update
     *   }
     * })
     */
    upsert<T extends UserLocationUpsertArgs>(args: SelectSubset<T, UserLocationUpsertArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationCountArgs} args - Arguments to filter UserLocations to count.
     * @example
     * // Count the number of UserLocations
     * const count = await prisma.userLocation.count({
     *   where: {
     *     // ... the filter for the UserLocations we want to count
     *   }
     * })
    **/
    count<T extends UserLocationCountArgs>(
      args?: Subset<T, UserLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLocationAggregateArgs>(args: Subset<T, UserLocationAggregateArgs>): Prisma.PrismaPromise<GetUserLocationAggregateType<T>>

    /**
     * Group by UserLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLocationGroupByArgs['orderBy'] }
        : { orderBy?: UserLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLocation model
   */
  readonly fields: UserLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    recommendations<T extends UserLocation$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, UserLocation$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLocation model
   */ 
  interface UserLocationFieldRefs {
    readonly userLocationId: FieldRef<"UserLocation", 'Int'>
    readonly userId: FieldRef<"UserLocation", 'Int'>
    readonly latitude: FieldRef<"UserLocation", 'Float'>
    readonly longitude: FieldRef<"UserLocation", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * UserLocation findUnique
   */
  export type UserLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation findUniqueOrThrow
   */
  export type UserLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation findFirst
   */
  export type UserLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLocations.
     */
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation findFirstOrThrow
   */
  export type UserLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLocations.
     */
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation findMany
   */
  export type UserLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocations to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation create
   */
  export type UserLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLocation.
     */
    data: XOR<UserLocationCreateInput, UserLocationUncheckedCreateInput>
  }

  /**
   * UserLocation createMany
   */
  export type UserLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLocations.
     */
    data: UserLocationCreateManyInput | UserLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLocation createManyAndReturn
   */
  export type UserLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserLocations.
     */
    data: UserLocationCreateManyInput | UserLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLocation update
   */
  export type UserLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLocation.
     */
    data: XOR<UserLocationUpdateInput, UserLocationUncheckedUpdateInput>
    /**
     * Choose, which UserLocation to update.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation updateMany
   */
  export type UserLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLocations.
     */
    data: XOR<UserLocationUpdateManyMutationInput, UserLocationUncheckedUpdateManyInput>
    /**
     * Filter which UserLocations to update
     */
    where?: UserLocationWhereInput
  }

  /**
   * UserLocation upsert
   */
  export type UserLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLocation to update in case it exists.
     */
    where: UserLocationWhereUniqueInput
    /**
     * In case the UserLocation found by the `where` argument doesn't exist, create a new UserLocation with this data.
     */
    create: XOR<UserLocationCreateInput, UserLocationUncheckedCreateInput>
    /**
     * In case the UserLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLocationUpdateInput, UserLocationUncheckedUpdateInput>
  }

  /**
   * UserLocation delete
   */
  export type UserLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter which UserLocation to delete.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation deleteMany
   */
  export type UserLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLocations to delete
     */
    where?: UserLocationWhereInput
  }

  /**
   * UserLocation.recommendations
   */
  export type UserLocation$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * UserLocation without action
   */
  export type UserLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
  }


  /**
   * Model Recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    recommendationId: number | null
    locationId: number | null
    userId: number | null
    userLocationId: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    recommendationId: number | null
    locationId: number | null
    userId: number | null
    userLocationId: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    recommendationId: number | null
    locationId: number | null
    userId: number | null
    userLocationId: number | null
    createdAt: Date | null
  }

  export type RecommendationMaxAggregateOutputType = {
    recommendationId: number | null
    locationId: number | null
    userId: number | null
    userLocationId: number | null
    createdAt: Date | null
  }

  export type RecommendationCountAggregateOutputType = {
    recommendationId: number
    locationId: number
    userId: number
    userLocationId: number
    createdAt: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    recommendationId?: true
    locationId?: true
    userId?: true
    userLocationId?: true
  }

  export type RecommendationSumAggregateInputType = {
    recommendationId?: true
    locationId?: true
    userId?: true
    userLocationId?: true
  }

  export type RecommendationMinAggregateInputType = {
    recommendationId?: true
    locationId?: true
    userId?: true
    userLocationId?: true
    createdAt?: true
  }

  export type RecommendationMaxAggregateInputType = {
    recommendationId?: true
    locationId?: true
    userId?: true
    userLocationId?: true
    createdAt?: true
  }

  export type RecommendationCountAggregateInputType = {
    recommendationId?: true
    locationId?: true
    userId?: true
    userLocationId?: true
    createdAt?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendation to aggregate.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type RecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithAggregationInput | RecommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    recommendationId: number
    locationId: number
    userId: number
    userLocationId: number
    createdAt: Date
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recommendationId?: boolean
    locationId?: boolean
    userId?: boolean
    userLocationId?: boolean
    createdAt?: boolean
    location?: boolean | ActivityLocationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    userLocation?: boolean | UserLocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recommendationId?: boolean
    locationId?: boolean
    userId?: boolean
    userLocationId?: boolean
    createdAt?: boolean
    location?: boolean | ActivityLocationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    userLocation?: boolean | UserLocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectScalar = {
    recommendationId?: boolean
    locationId?: boolean
    userId?: boolean
    userLocationId?: boolean
    createdAt?: boolean
  }

  export type RecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | ActivityLocationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    userLocation?: boolean | UserLocationDefaultArgs<ExtArgs>
  }
  export type RecommendationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | ActivityLocationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    userLocation?: boolean | UserLocationDefaultArgs<ExtArgs>
  }

  export type $RecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recommendation"
    objects: {
      location: Prisma.$ActivityLocationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      userLocation: Prisma.$UserLocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      recommendationId: number
      locationId: number
      userId: number
      userLocationId: number
      createdAt: Date
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }

  type RecommendationGetPayload<S extends boolean | null | undefined | RecommendationDefaultArgs> = $Result.GetResult<Prisma.$RecommendationPayload, S>

  type RecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecommendationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface RecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recommendation'], meta: { name: 'Recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationFindUniqueArgs>(args: SelectSubset<T, RecommendationFindUniqueArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recommendation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationFindFirstArgs>(args?: SelectSubset<T, RecommendationFindFirstArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `recommendationId`
     * const recommendationWithRecommendationIdOnly = await prisma.recommendation.findMany({ select: { recommendationId: true } })
     * 
     */
    findMany<T extends RecommendationFindManyArgs>(args?: SelectSubset<T, RecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
     */
    create<T extends RecommendationCreateArgs>(args: SelectSubset<T, RecommendationCreateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recommendations.
     * @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationCreateManyArgs>(args?: SelectSubset<T, RecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recommendations and returns the data saved in the database.
     * @param {RecommendationCreateManyAndReturnArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recommendations and only return the `recommendationId`
     * const recommendationWithRecommendationIdOnly = await prisma.recommendation.createManyAndReturn({ 
     *   select: { recommendationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecommendationCreateManyAndReturnArgs>(args?: SelectSubset<T, RecommendationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
     */
    delete<T extends RecommendationDeleteArgs>(args: SelectSubset<T, RecommendationDeleteArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationUpdateArgs>(args: SelectSubset<T, RecommendationUpdateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationDeleteManyArgs>(args?: SelectSubset<T, RecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationUpdateManyArgs>(args: SelectSubset<T, RecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationUpsertArgs>(args: SelectSubset<T, RecommendationUpsertArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recommendation model
   */
  readonly fields: RecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends ActivityLocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLocationDefaultArgs<ExtArgs>>): Prisma__ActivityLocationClient<$Result.GetResult<Prisma.$ActivityLocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    userLocation<T extends UserLocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserLocationDefaultArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recommendation model
   */ 
  interface RecommendationFieldRefs {
    readonly recommendationId: FieldRef<"Recommendation", 'Int'>
    readonly locationId: FieldRef<"Recommendation", 'Int'>
    readonly userId: FieldRef<"Recommendation", 'Int'>
    readonly userLocationId: FieldRef<"Recommendation", 'Int'>
    readonly createdAt: FieldRef<"Recommendation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findUniqueOrThrow
   */
  export type RecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findFirstOrThrow
   */
  export type RecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendations to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a Recommendation.
     */
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }

  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recommendation createManyAndReturn
   */
  export type RecommendationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a Recommendation.
     */
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
  }

  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     */
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     */
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }

  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter which Recommendation to delete.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendations to delete
     */
    where?: RecommendationWhereInput
  }

  /**
   * Recommendation without action
   */
  export type RecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
  }


  /**
   * Model RecentActivity
   */

  export type AggregateRecentActivity = {
    _count: RecentActivityCountAggregateOutputType | null
    _avg: RecentActivityAvgAggregateOutputType | null
    _sum: RecentActivitySumAggregateOutputType | null
    _min: RecentActivityMinAggregateOutputType | null
    _max: RecentActivityMaxAggregateOutputType | null
  }

  export type RecentActivityAvgAggregateOutputType = {
    recentActivityId: number | null
    userId: number | null
    activityId: number | null
  }

  export type RecentActivitySumAggregateOutputType = {
    recentActivityId: number | null
    userId: number | null
    activityId: number | null
  }

  export type RecentActivityMinAggregateOutputType = {
    recentActivityId: number | null
    userId: number | null
    activityId: number | null
    viewedAt: Date | null
  }

  export type RecentActivityMaxAggregateOutputType = {
    recentActivityId: number | null
    userId: number | null
    activityId: number | null
    viewedAt: Date | null
  }

  export type RecentActivityCountAggregateOutputType = {
    recentActivityId: number
    userId: number
    activityId: number
    viewedAt: number
    _all: number
  }


  export type RecentActivityAvgAggregateInputType = {
    recentActivityId?: true
    userId?: true
    activityId?: true
  }

  export type RecentActivitySumAggregateInputType = {
    recentActivityId?: true
    userId?: true
    activityId?: true
  }

  export type RecentActivityMinAggregateInputType = {
    recentActivityId?: true
    userId?: true
    activityId?: true
    viewedAt?: true
  }

  export type RecentActivityMaxAggregateInputType = {
    recentActivityId?: true
    userId?: true
    activityId?: true
    viewedAt?: true
  }

  export type RecentActivityCountAggregateInputType = {
    recentActivityId?: true
    userId?: true
    activityId?: true
    viewedAt?: true
    _all?: true
  }

  export type RecentActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecentActivity to aggregate.
     */
    where?: RecentActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecentActivities to fetch.
     */
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecentActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecentActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecentActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecentActivities
    **/
    _count?: true | RecentActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecentActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecentActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecentActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecentActivityMaxAggregateInputType
  }

  export type GetRecentActivityAggregateType<T extends RecentActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateRecentActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecentActivity[P]>
      : GetScalarType<T[P], AggregateRecentActivity[P]>
  }




  export type RecentActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecentActivityWhereInput
    orderBy?: RecentActivityOrderByWithAggregationInput | RecentActivityOrderByWithAggregationInput[]
    by: RecentActivityScalarFieldEnum[] | RecentActivityScalarFieldEnum
    having?: RecentActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecentActivityCountAggregateInputType | true
    _avg?: RecentActivityAvgAggregateInputType
    _sum?: RecentActivitySumAggregateInputType
    _min?: RecentActivityMinAggregateInputType
    _max?: RecentActivityMaxAggregateInputType
  }

  export type RecentActivityGroupByOutputType = {
    recentActivityId: number
    userId: number
    activityId: number
    viewedAt: Date
    _count: RecentActivityCountAggregateOutputType | null
    _avg: RecentActivityAvgAggregateOutputType | null
    _sum: RecentActivitySumAggregateOutputType | null
    _min: RecentActivityMinAggregateOutputType | null
    _max: RecentActivityMaxAggregateOutputType | null
  }

  type GetRecentActivityGroupByPayload<T extends RecentActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecentActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecentActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecentActivityGroupByOutputType[P]>
            : GetScalarType<T[P], RecentActivityGroupByOutputType[P]>
        }
      >
    >


  export type RecentActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recentActivityId?: boolean
    userId?: boolean
    activityId?: boolean
    viewedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recentActivity"]>

  export type RecentActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recentActivityId?: boolean
    userId?: boolean
    activityId?: boolean
    viewedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recentActivity"]>

  export type RecentActivitySelectScalar = {
    recentActivityId?: boolean
    userId?: boolean
    activityId?: boolean
    viewedAt?: boolean
  }

  export type RecentActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type RecentActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $RecentActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecentActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      recentActivityId: number
      userId: number
      activityId: number
      viewedAt: Date
    }, ExtArgs["result"]["recentActivity"]>
    composites: {}
  }

  type RecentActivityGetPayload<S extends boolean | null | undefined | RecentActivityDefaultArgs> = $Result.GetResult<Prisma.$RecentActivityPayload, S>

  type RecentActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecentActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecentActivityCountAggregateInputType | true
    }

  export interface RecentActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecentActivity'], meta: { name: 'RecentActivity' } }
    /**
     * Find zero or one RecentActivity that matches the filter.
     * @param {RecentActivityFindUniqueArgs} args - Arguments to find a RecentActivity
     * @example
     * // Get one RecentActivity
     * const recentActivity = await prisma.recentActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecentActivityFindUniqueArgs>(args: SelectSubset<T, RecentActivityFindUniqueArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecentActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecentActivityFindUniqueOrThrowArgs} args - Arguments to find a RecentActivity
     * @example
     * // Get one RecentActivity
     * const recentActivity = await prisma.recentActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecentActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, RecentActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecentActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityFindFirstArgs} args - Arguments to find a RecentActivity
     * @example
     * // Get one RecentActivity
     * const recentActivity = await prisma.recentActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecentActivityFindFirstArgs>(args?: SelectSubset<T, RecentActivityFindFirstArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecentActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityFindFirstOrThrowArgs} args - Arguments to find a RecentActivity
     * @example
     * // Get one RecentActivity
     * const recentActivity = await prisma.recentActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecentActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, RecentActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecentActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecentActivities
     * const recentActivities = await prisma.recentActivity.findMany()
     * 
     * // Get first 10 RecentActivities
     * const recentActivities = await prisma.recentActivity.findMany({ take: 10 })
     * 
     * // Only select the `recentActivityId`
     * const recentActivityWithRecentActivityIdOnly = await prisma.recentActivity.findMany({ select: { recentActivityId: true } })
     * 
     */
    findMany<T extends RecentActivityFindManyArgs>(args?: SelectSubset<T, RecentActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecentActivity.
     * @param {RecentActivityCreateArgs} args - Arguments to create a RecentActivity.
     * @example
     * // Create one RecentActivity
     * const RecentActivity = await prisma.recentActivity.create({
     *   data: {
     *     // ... data to create a RecentActivity
     *   }
     * })
     * 
     */
    create<T extends RecentActivityCreateArgs>(args: SelectSubset<T, RecentActivityCreateArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecentActivities.
     * @param {RecentActivityCreateManyArgs} args - Arguments to create many RecentActivities.
     * @example
     * // Create many RecentActivities
     * const recentActivity = await prisma.recentActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecentActivityCreateManyArgs>(args?: SelectSubset<T, RecentActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecentActivities and returns the data saved in the database.
     * @param {RecentActivityCreateManyAndReturnArgs} args - Arguments to create many RecentActivities.
     * @example
     * // Create many RecentActivities
     * const recentActivity = await prisma.recentActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecentActivities and only return the `recentActivityId`
     * const recentActivityWithRecentActivityIdOnly = await prisma.recentActivity.createManyAndReturn({ 
     *   select: { recentActivityId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecentActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, RecentActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecentActivity.
     * @param {RecentActivityDeleteArgs} args - Arguments to delete one RecentActivity.
     * @example
     * // Delete one RecentActivity
     * const RecentActivity = await prisma.recentActivity.delete({
     *   where: {
     *     // ... filter to delete one RecentActivity
     *   }
     * })
     * 
     */
    delete<T extends RecentActivityDeleteArgs>(args: SelectSubset<T, RecentActivityDeleteArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecentActivity.
     * @param {RecentActivityUpdateArgs} args - Arguments to update one RecentActivity.
     * @example
     * // Update one RecentActivity
     * const recentActivity = await prisma.recentActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecentActivityUpdateArgs>(args: SelectSubset<T, RecentActivityUpdateArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecentActivities.
     * @param {RecentActivityDeleteManyArgs} args - Arguments to filter RecentActivities to delete.
     * @example
     * // Delete a few RecentActivities
     * const { count } = await prisma.recentActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecentActivityDeleteManyArgs>(args?: SelectSubset<T, RecentActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecentActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecentActivities
     * const recentActivity = await prisma.recentActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecentActivityUpdateManyArgs>(args: SelectSubset<T, RecentActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecentActivity.
     * @param {RecentActivityUpsertArgs} args - Arguments to update or create a RecentActivity.
     * @example
     * // Update or create a RecentActivity
     * const recentActivity = await prisma.recentActivity.upsert({
     *   create: {
     *     // ... data to create a RecentActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecentActivity we want to update
     *   }
     * })
     */
    upsert<T extends RecentActivityUpsertArgs>(args: SelectSubset<T, RecentActivityUpsertArgs<ExtArgs>>): Prisma__RecentActivityClient<$Result.GetResult<Prisma.$RecentActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecentActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityCountArgs} args - Arguments to filter RecentActivities to count.
     * @example
     * // Count the number of RecentActivities
     * const count = await prisma.recentActivity.count({
     *   where: {
     *     // ... the filter for the RecentActivities we want to count
     *   }
     * })
    **/
    count<T extends RecentActivityCountArgs>(
      args?: Subset<T, RecentActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecentActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecentActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecentActivityAggregateArgs>(args: Subset<T, RecentActivityAggregateArgs>): Prisma.PrismaPromise<GetRecentActivityAggregateType<T>>

    /**
     * Group by RecentActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecentActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecentActivityGroupByArgs['orderBy'] }
        : { orderBy?: RecentActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecentActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecentActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecentActivity model
   */
  readonly fields: RecentActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecentActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecentActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecentActivity model
   */ 
  interface RecentActivityFieldRefs {
    readonly recentActivityId: FieldRef<"RecentActivity", 'Int'>
    readonly userId: FieldRef<"RecentActivity", 'Int'>
    readonly activityId: FieldRef<"RecentActivity", 'Int'>
    readonly viewedAt: FieldRef<"RecentActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecentActivity findUnique
   */
  export type RecentActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter, which RecentActivity to fetch.
     */
    where: RecentActivityWhereUniqueInput
  }

  /**
   * RecentActivity findUniqueOrThrow
   */
  export type RecentActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter, which RecentActivity to fetch.
     */
    where: RecentActivityWhereUniqueInput
  }

  /**
   * RecentActivity findFirst
   */
  export type RecentActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter, which RecentActivity to fetch.
     */
    where?: RecentActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecentActivities to fetch.
     */
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecentActivities.
     */
    cursor?: RecentActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecentActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecentActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecentActivities.
     */
    distinct?: RecentActivityScalarFieldEnum | RecentActivityScalarFieldEnum[]
  }

  /**
   * RecentActivity findFirstOrThrow
   */
  export type RecentActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter, which RecentActivity to fetch.
     */
    where?: RecentActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecentActivities to fetch.
     */
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecentActivities.
     */
    cursor?: RecentActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecentActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecentActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecentActivities.
     */
    distinct?: RecentActivityScalarFieldEnum | RecentActivityScalarFieldEnum[]
  }

  /**
   * RecentActivity findMany
   */
  export type RecentActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter, which RecentActivities to fetch.
     */
    where?: RecentActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecentActivities to fetch.
     */
    orderBy?: RecentActivityOrderByWithRelationInput | RecentActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecentActivities.
     */
    cursor?: RecentActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecentActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecentActivities.
     */
    skip?: number
    distinct?: RecentActivityScalarFieldEnum | RecentActivityScalarFieldEnum[]
  }

  /**
   * RecentActivity create
   */
  export type RecentActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a RecentActivity.
     */
    data: XOR<RecentActivityCreateInput, RecentActivityUncheckedCreateInput>
  }

  /**
   * RecentActivity createMany
   */
  export type RecentActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecentActivities.
     */
    data: RecentActivityCreateManyInput | RecentActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecentActivity createManyAndReturn
   */
  export type RecentActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecentActivities.
     */
    data: RecentActivityCreateManyInput | RecentActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecentActivity update
   */
  export type RecentActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a RecentActivity.
     */
    data: XOR<RecentActivityUpdateInput, RecentActivityUncheckedUpdateInput>
    /**
     * Choose, which RecentActivity to update.
     */
    where: RecentActivityWhereUniqueInput
  }

  /**
   * RecentActivity updateMany
   */
  export type RecentActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecentActivities.
     */
    data: XOR<RecentActivityUpdateManyMutationInput, RecentActivityUncheckedUpdateManyInput>
    /**
     * Filter which RecentActivities to update
     */
    where?: RecentActivityWhereInput
  }

  /**
   * RecentActivity upsert
   */
  export type RecentActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the RecentActivity to update in case it exists.
     */
    where: RecentActivityWhereUniqueInput
    /**
     * In case the RecentActivity found by the `where` argument doesn't exist, create a new RecentActivity with this data.
     */
    create: XOR<RecentActivityCreateInput, RecentActivityUncheckedCreateInput>
    /**
     * In case the RecentActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecentActivityUpdateInput, RecentActivityUncheckedUpdateInput>
  }

  /**
   * RecentActivity delete
   */
  export type RecentActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
    /**
     * Filter which RecentActivity to delete.
     */
    where: RecentActivityWhereUniqueInput
  }

  /**
   * RecentActivity deleteMany
   */
  export type RecentActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecentActivities to delete
     */
    where?: RecentActivityWhereInput
  }

  /**
   * RecentActivity without action
   */
  export type RecentActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecentActivity
     */
    select?: RecentActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentActivityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    username: 'username',
    email: 'email',
    profileImage: 'profileImage',
    password: 'password',
    refreshToken: 'refreshToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    activityId: 'activityId',
    title: 'title',
    description: 'description',
    location: 'location',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const KeywordScalarFieldEnum: {
    keywordId: 'keywordId',
    keywordName: 'keywordName'
  };

  export type KeywordScalarFieldEnum = (typeof KeywordScalarFieldEnum)[keyof typeof KeywordScalarFieldEnum]


  export const ActivityKeywordScalarFieldEnum: {
    activityId: 'activityId',
    keywordId: 'keywordId'
  };

  export type ActivityKeywordScalarFieldEnum = (typeof ActivityKeywordScalarFieldEnum)[keyof typeof ActivityKeywordScalarFieldEnum]


  export const ActivityLocationScalarFieldEnum: {
    locationId: 'locationId',
    name: 'name',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type ActivityLocationScalarFieldEnum = (typeof ActivityLocationScalarFieldEnum)[keyof typeof ActivityLocationScalarFieldEnum]


  export const UserLocationScalarFieldEnum: {
    userLocationId: 'userLocationId',
    userId: 'userId',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type UserLocationScalarFieldEnum = (typeof UserLocationScalarFieldEnum)[keyof typeof UserLocationScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    recommendationId: 'recommendationId',
    locationId: 'locationId',
    userId: 'userId',
    userLocationId: 'userLocationId',
    createdAt: 'createdAt'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const RecentActivityScalarFieldEnum: {
    recentActivityId: 'recentActivityId',
    userId: 'userId',
    activityId: 'activityId',
    viewedAt: 'viewedAt'
  };

  export type RecentActivityScalarFieldEnum = (typeof RecentActivityScalarFieldEnum)[keyof typeof RecentActivityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    profileImage?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    activities?: ActivityListRelationFilter
    userLocations?: UserLocationListRelationFilter
    recommendations?: RecommendationListRelationFilter
    recentActivities?: RecentActivityListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    password?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    userLocations?: UserLocationOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    recentActivities?: RecentActivityOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    profileImage?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    activities?: ActivityListRelationFilter
    userLocations?: UserLocationListRelationFilter
    recommendations?: RecommendationListRelationFilter
    recentActivities?: RecentActivityListRelationFilter
  }, "userId" | "email">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    profileImage?: SortOrderInput | SortOrder
    password?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    activityId?: IntFilter<"Activity"> | number
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    imageUrl?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: IntFilter<"Activity"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    activityKeywords?: ActivityKeywordListRelationFilter
    recentActivities?: RecentActivityListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    activityKeywords?: ActivityKeywordOrderByRelationAggregateInput
    recentActivities?: RecentActivityOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    activityId?: number
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    imageUrl?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: IntFilter<"Activity"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    activityKeywords?: ActivityKeywordListRelationFilter
    recentActivities?: RecentActivityListRelationFilter
  }, "activityId">

  export type ActivityOrderByWithAggregationInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    activityId?: IntWithAggregatesFilter<"Activity"> | number
    title?: StringWithAggregatesFilter<"Activity"> | string
    description?: StringWithAggregatesFilter<"Activity"> | string
    location?: StringWithAggregatesFilter<"Activity"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    userId?: IntWithAggregatesFilter<"Activity"> | number
  }

  export type KeywordWhereInput = {
    AND?: KeywordWhereInput | KeywordWhereInput[]
    OR?: KeywordWhereInput[]
    NOT?: KeywordWhereInput | KeywordWhereInput[]
    keywordId?: IntFilter<"Keyword"> | number
    keywordName?: StringFilter<"Keyword"> | string
    activityKeywords?: ActivityKeywordListRelationFilter
  }

  export type KeywordOrderByWithRelationInput = {
    keywordId?: SortOrder
    keywordName?: SortOrder
    activityKeywords?: ActivityKeywordOrderByRelationAggregateInput
  }

  export type KeywordWhereUniqueInput = Prisma.AtLeast<{
    keywordId?: number
    AND?: KeywordWhereInput | KeywordWhereInput[]
    OR?: KeywordWhereInput[]
    NOT?: KeywordWhereInput | KeywordWhereInput[]
    keywordName?: StringFilter<"Keyword"> | string
    activityKeywords?: ActivityKeywordListRelationFilter
  }, "keywordId">

  export type KeywordOrderByWithAggregationInput = {
    keywordId?: SortOrder
    keywordName?: SortOrder
    _count?: KeywordCountOrderByAggregateInput
    _avg?: KeywordAvgOrderByAggregateInput
    _max?: KeywordMaxOrderByAggregateInput
    _min?: KeywordMinOrderByAggregateInput
    _sum?: KeywordSumOrderByAggregateInput
  }

  export type KeywordScalarWhereWithAggregatesInput = {
    AND?: KeywordScalarWhereWithAggregatesInput | KeywordScalarWhereWithAggregatesInput[]
    OR?: KeywordScalarWhereWithAggregatesInput[]
    NOT?: KeywordScalarWhereWithAggregatesInput | KeywordScalarWhereWithAggregatesInput[]
    keywordId?: IntWithAggregatesFilter<"Keyword"> | number
    keywordName?: StringWithAggregatesFilter<"Keyword"> | string
  }

  export type ActivityKeywordWhereInput = {
    AND?: ActivityKeywordWhereInput | ActivityKeywordWhereInput[]
    OR?: ActivityKeywordWhereInput[]
    NOT?: ActivityKeywordWhereInput | ActivityKeywordWhereInput[]
    activityId?: IntFilter<"ActivityKeyword"> | number
    keywordId?: IntFilter<"ActivityKeyword"> | number
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
    keyword?: XOR<KeywordRelationFilter, KeywordWhereInput>
  }

  export type ActivityKeywordOrderByWithRelationInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    keyword?: KeywordOrderByWithRelationInput
  }

  export type ActivityKeywordWhereUniqueInput = Prisma.AtLeast<{
    activityId_keywordId?: ActivityKeywordActivityIdKeywordIdCompoundUniqueInput
    AND?: ActivityKeywordWhereInput | ActivityKeywordWhereInput[]
    OR?: ActivityKeywordWhereInput[]
    NOT?: ActivityKeywordWhereInput | ActivityKeywordWhereInput[]
    activityId?: IntFilter<"ActivityKeyword"> | number
    keywordId?: IntFilter<"ActivityKeyword"> | number
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
    keyword?: XOR<KeywordRelationFilter, KeywordWhereInput>
  }, "activityId_keywordId">

  export type ActivityKeywordOrderByWithAggregationInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
    _count?: ActivityKeywordCountOrderByAggregateInput
    _avg?: ActivityKeywordAvgOrderByAggregateInput
    _max?: ActivityKeywordMaxOrderByAggregateInput
    _min?: ActivityKeywordMinOrderByAggregateInput
    _sum?: ActivityKeywordSumOrderByAggregateInput
  }

  export type ActivityKeywordScalarWhereWithAggregatesInput = {
    AND?: ActivityKeywordScalarWhereWithAggregatesInput | ActivityKeywordScalarWhereWithAggregatesInput[]
    OR?: ActivityKeywordScalarWhereWithAggregatesInput[]
    NOT?: ActivityKeywordScalarWhereWithAggregatesInput | ActivityKeywordScalarWhereWithAggregatesInput[]
    activityId?: IntWithAggregatesFilter<"ActivityKeyword"> | number
    keywordId?: IntWithAggregatesFilter<"ActivityKeyword"> | number
  }

  export type ActivityLocationWhereInput = {
    AND?: ActivityLocationWhereInput | ActivityLocationWhereInput[]
    OR?: ActivityLocationWhereInput[]
    NOT?: ActivityLocationWhereInput | ActivityLocationWhereInput[]
    locationId?: IntFilter<"ActivityLocation"> | number
    name?: StringFilter<"ActivityLocation"> | string
    latitude?: FloatFilter<"ActivityLocation"> | number
    longitude?: FloatFilter<"ActivityLocation"> | number
    recommendations?: RecommendationListRelationFilter
  }

  export type ActivityLocationOrderByWithRelationInput = {
    locationId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    recommendations?: RecommendationOrderByRelationAggregateInput
  }

  export type ActivityLocationWhereUniqueInput = Prisma.AtLeast<{
    locationId?: number
    AND?: ActivityLocationWhereInput | ActivityLocationWhereInput[]
    OR?: ActivityLocationWhereInput[]
    NOT?: ActivityLocationWhereInput | ActivityLocationWhereInput[]
    name?: StringFilter<"ActivityLocation"> | string
    latitude?: FloatFilter<"ActivityLocation"> | number
    longitude?: FloatFilter<"ActivityLocation"> | number
    recommendations?: RecommendationListRelationFilter
  }, "locationId">

  export type ActivityLocationOrderByWithAggregationInput = {
    locationId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    _count?: ActivityLocationCountOrderByAggregateInput
    _avg?: ActivityLocationAvgOrderByAggregateInput
    _max?: ActivityLocationMaxOrderByAggregateInput
    _min?: ActivityLocationMinOrderByAggregateInput
    _sum?: ActivityLocationSumOrderByAggregateInput
  }

  export type ActivityLocationScalarWhereWithAggregatesInput = {
    AND?: ActivityLocationScalarWhereWithAggregatesInput | ActivityLocationScalarWhereWithAggregatesInput[]
    OR?: ActivityLocationScalarWhereWithAggregatesInput[]
    NOT?: ActivityLocationScalarWhereWithAggregatesInput | ActivityLocationScalarWhereWithAggregatesInput[]
    locationId?: IntWithAggregatesFilter<"ActivityLocation"> | number
    name?: StringWithAggregatesFilter<"ActivityLocation"> | string
    latitude?: FloatWithAggregatesFilter<"ActivityLocation"> | number
    longitude?: FloatWithAggregatesFilter<"ActivityLocation"> | number
  }

  export type UserLocationWhereInput = {
    AND?: UserLocationWhereInput | UserLocationWhereInput[]
    OR?: UserLocationWhereInput[]
    NOT?: UserLocationWhereInput | UserLocationWhereInput[]
    userLocationId?: IntFilter<"UserLocation"> | number
    userId?: IntFilter<"UserLocation"> | number
    latitude?: FloatFilter<"UserLocation"> | number
    longitude?: FloatFilter<"UserLocation"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    recommendations?: RecommendationListRelationFilter
  }

  export type UserLocationOrderByWithRelationInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    user?: UserOrderByWithRelationInput
    recommendations?: RecommendationOrderByRelationAggregateInput
  }

  export type UserLocationWhereUniqueInput = Prisma.AtLeast<{
    userLocationId?: number
    AND?: UserLocationWhereInput | UserLocationWhereInput[]
    OR?: UserLocationWhereInput[]
    NOT?: UserLocationWhereInput | UserLocationWhereInput[]
    userId?: IntFilter<"UserLocation"> | number
    latitude?: FloatFilter<"UserLocation"> | number
    longitude?: FloatFilter<"UserLocation"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    recommendations?: RecommendationListRelationFilter
  }, "userLocationId">

  export type UserLocationOrderByWithAggregationInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    _count?: UserLocationCountOrderByAggregateInput
    _avg?: UserLocationAvgOrderByAggregateInput
    _max?: UserLocationMaxOrderByAggregateInput
    _min?: UserLocationMinOrderByAggregateInput
    _sum?: UserLocationSumOrderByAggregateInput
  }

  export type UserLocationScalarWhereWithAggregatesInput = {
    AND?: UserLocationScalarWhereWithAggregatesInput | UserLocationScalarWhereWithAggregatesInput[]
    OR?: UserLocationScalarWhereWithAggregatesInput[]
    NOT?: UserLocationScalarWhereWithAggregatesInput | UserLocationScalarWhereWithAggregatesInput[]
    userLocationId?: IntWithAggregatesFilter<"UserLocation"> | number
    userId?: IntWithAggregatesFilter<"UserLocation"> | number
    latitude?: FloatWithAggregatesFilter<"UserLocation"> | number
    longitude?: FloatWithAggregatesFilter<"UserLocation"> | number
  }

  export type RecommendationWhereInput = {
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    recommendationId?: IntFilter<"Recommendation"> | number
    locationId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    userLocationId?: IntFilter<"Recommendation"> | number
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    location?: XOR<ActivityLocationRelationFilter, ActivityLocationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userLocation?: XOR<UserLocationRelationFilter, UserLocationWhereInput>
  }

  export type RecommendationOrderByWithRelationInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
    createdAt?: SortOrder
    location?: ActivityLocationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    userLocation?: UserLocationOrderByWithRelationInput
  }

  export type RecommendationWhereUniqueInput = Prisma.AtLeast<{
    recommendationId?: number
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    locationId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    userLocationId?: IntFilter<"Recommendation"> | number
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    location?: XOR<ActivityLocationRelationFilter, ActivityLocationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userLocation?: XOR<UserLocationRelationFilter, UserLocationWhereInput>
  }, "recommendationId">

  export type RecommendationOrderByWithAggregationInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
    createdAt?: SortOrder
    _count?: RecommendationCountOrderByAggregateInput
    _avg?: RecommendationAvgOrderByAggregateInput
    _max?: RecommendationMaxOrderByAggregateInput
    _min?: RecommendationMinOrderByAggregateInput
    _sum?: RecommendationSumOrderByAggregateInput
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    OR?: RecommendationScalarWhereWithAggregatesInput[]
    NOT?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    recommendationId?: IntWithAggregatesFilter<"Recommendation"> | number
    locationId?: IntWithAggregatesFilter<"Recommendation"> | number
    userId?: IntWithAggregatesFilter<"Recommendation"> | number
    userLocationId?: IntWithAggregatesFilter<"Recommendation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Recommendation"> | Date | string
  }

  export type RecentActivityWhereInput = {
    AND?: RecentActivityWhereInput | RecentActivityWhereInput[]
    OR?: RecentActivityWhereInput[]
    NOT?: RecentActivityWhereInput | RecentActivityWhereInput[]
    recentActivityId?: IntFilter<"RecentActivity"> | number
    userId?: IntFilter<"RecentActivity"> | number
    activityId?: IntFilter<"RecentActivity"> | number
    viewedAt?: DateTimeFilter<"RecentActivity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }

  export type RecentActivityOrderByWithRelationInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    viewedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type RecentActivityWhereUniqueInput = Prisma.AtLeast<{
    recentActivityId?: number
    AND?: RecentActivityWhereInput | RecentActivityWhereInput[]
    OR?: RecentActivityWhereInput[]
    NOT?: RecentActivityWhereInput | RecentActivityWhereInput[]
    userId?: IntFilter<"RecentActivity"> | number
    activityId?: IntFilter<"RecentActivity"> | number
    viewedAt?: DateTimeFilter<"RecentActivity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }, "recentActivityId">

  export type RecentActivityOrderByWithAggregationInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    viewedAt?: SortOrder
    _count?: RecentActivityCountOrderByAggregateInput
    _avg?: RecentActivityAvgOrderByAggregateInput
    _max?: RecentActivityMaxOrderByAggregateInput
    _min?: RecentActivityMinOrderByAggregateInput
    _sum?: RecentActivitySumOrderByAggregateInput
  }

  export type RecentActivityScalarWhereWithAggregatesInput = {
    AND?: RecentActivityScalarWhereWithAggregatesInput | RecentActivityScalarWhereWithAggregatesInput[]
    OR?: RecentActivityScalarWhereWithAggregatesInput[]
    NOT?: RecentActivityScalarWhereWithAggregatesInput | RecentActivityScalarWhereWithAggregatesInput[]
    recentActivityId?: IntWithAggregatesFilter<"RecentActivity"> | number
    userId?: IntWithAggregatesFilter<"RecentActivity"> | number
    activityId?: IntWithAggregatesFilter<"RecentActivity"> | number
    viewedAt?: DateTimeWithAggregatesFilter<"RecentActivity"> | Date | string
  }

  export type UserCreateInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    userLocations?: UserLocationCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    userLocations?: UserLocationUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityCreateInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
    activityKeywords?: ActivityKeywordCreateNestedManyWithoutActivityInput
    recentActivities?: RecentActivityCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    userId: number
    activityKeywords?: ActivityKeywordUncheckedCreateNestedManyWithoutActivityInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    activityKeywords?: ActivityKeywordUpdateManyWithoutActivityNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    activityKeywords?: ActivityKeywordUncheckedUpdateManyWithoutActivityNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    userId: number
  }

  export type ActivityUpdateManyMutationInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordCreateInput = {
    keywordId: number
    keywordName: string
    activityKeywords?: ActivityKeywordCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateInput = {
    keywordId: number
    keywordName: string
    activityKeywords?: ActivityKeywordUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUpdateInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
    activityKeywords?: ActivityKeywordUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
    activityKeywords?: ActivityKeywordUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordCreateManyInput = {
    keywordId: number
    keywordName: string
  }

  export type KeywordUpdateManyMutationInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordUncheckedUpdateManyInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityKeywordCreateInput = {
    activity: ActivityCreateNestedOneWithoutActivityKeywordsInput
    keyword: KeywordCreateNestedOneWithoutActivityKeywordsInput
  }

  export type ActivityKeywordUncheckedCreateInput = {
    activityId: number
    keywordId: number
  }

  export type ActivityKeywordUpdateInput = {
    activity?: ActivityUpdateOneRequiredWithoutActivityKeywordsNestedInput
    keyword?: KeywordUpdateOneRequiredWithoutActivityKeywordsNestedInput
  }

  export type ActivityKeywordUncheckedUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityKeywordCreateManyInput = {
    activityId: number
    keywordId: number
  }

  export type ActivityKeywordUpdateManyMutationInput = {

  }

  export type ActivityKeywordUncheckedUpdateManyInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityLocationCreateInput = {
    locationId: number
    name: string
    latitude: number
    longitude: number
    recommendations?: RecommendationCreateNestedManyWithoutLocationInput
  }

  export type ActivityLocationUncheckedCreateInput = {
    locationId: number
    name: string
    latitude: number
    longitude: number
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type ActivityLocationUpdateInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    recommendations?: RecommendationUpdateManyWithoutLocationNestedInput
  }

  export type ActivityLocationUncheckedUpdateInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    recommendations?: RecommendationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ActivityLocationCreateManyInput = {
    locationId: number
    name: string
    latitude: number
    longitude: number
  }

  export type ActivityLocationUpdateManyMutationInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type ActivityLocationUncheckedUpdateManyInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type UserLocationCreateInput = {
    userLocationId: number
    latitude: number
    longitude: number
    user: UserCreateNestedOneWithoutUserLocationsInput
    recommendations?: RecommendationCreateNestedManyWithoutUserLocationInput
  }

  export type UserLocationUncheckedCreateInput = {
    userLocationId: number
    userId: number
    latitude: number
    longitude: number
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserLocationInput
  }

  export type UserLocationUpdateInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserLocationsNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserLocationNestedInput
  }

  export type UserLocationUncheckedUpdateInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserLocationNestedInput
  }

  export type UserLocationCreateManyInput = {
    userLocationId: number
    userId: number
    latitude: number
    longitude: number
  }

  export type UserLocationUpdateManyMutationInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type UserLocationUncheckedUpdateManyInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type RecommendationCreateInput = {
    recommendationId: number
    createdAt: Date | string
    location: ActivityLocationCreateNestedOneWithoutRecommendationsInput
    user: UserCreateNestedOneWithoutRecommendationsInput
    userLocation: UserLocationCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    recommendationId: number
    locationId: number
    userId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecommendationUpdateInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: ActivityLocationUpdateOneRequiredWithoutRecommendationsNestedInput
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
    userLocation?: UserLocationUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateManyInput = {
    recommendationId: number
    locationId: number
    userId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecommendationUpdateManyMutationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityCreateInput = {
    recentActivityId: number
    viewedAt: Date | string
    user: UserCreateNestedOneWithoutRecentActivitiesInput
    activity: ActivityCreateNestedOneWithoutRecentActivitiesInput
  }

  export type RecentActivityUncheckedCreateInput = {
    recentActivityId: number
    userId: number
    activityId: number
    viewedAt: Date | string
  }

  export type RecentActivityUpdateInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecentActivitiesNestedInput
    activity?: ActivityUpdateOneRequiredWithoutRecentActivitiesNestedInput
  }

  export type RecentActivityUncheckedUpdateInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityCreateManyInput = {
    recentActivityId: number
    userId: number
    activityId: number
    viewedAt: Date | string
  }

  export type RecentActivityUpdateManyMutationInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityUncheckedUpdateManyInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type UserLocationListRelationFilter = {
    every?: UserLocationWhereInput
    some?: UserLocationWhereInput
    none?: UserLocationWhereInput
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type RecentActivityListRelationFilter = {
    every?: RecentActivityWhereInput
    some?: RecentActivityWhereInput
    none?: RecentActivityWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecentActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    profileImage?: SortOrder
    password?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    profileImage?: SortOrder
    password?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    email?: SortOrder
    profileImage?: SortOrder
    password?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ActivityKeywordListRelationFilter = {
    every?: ActivityKeywordWhereInput
    some?: ActivityKeywordWhereInput
    none?: ActivityKeywordWhereInput
  }

  export type ActivityKeywordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityCountOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type KeywordCountOrderByAggregateInput = {
    keywordId?: SortOrder
    keywordName?: SortOrder
  }

  export type KeywordAvgOrderByAggregateInput = {
    keywordId?: SortOrder
  }

  export type KeywordMaxOrderByAggregateInput = {
    keywordId?: SortOrder
    keywordName?: SortOrder
  }

  export type KeywordMinOrderByAggregateInput = {
    keywordId?: SortOrder
    keywordName?: SortOrder
  }

  export type KeywordSumOrderByAggregateInput = {
    keywordId?: SortOrder
  }

  export type ActivityRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type KeywordRelationFilter = {
    is?: KeywordWhereInput
    isNot?: KeywordWhereInput
  }

  export type ActivityKeywordActivityIdKeywordIdCompoundUniqueInput = {
    activityId: number
    keywordId: number
  }

  export type ActivityKeywordCountOrderByAggregateInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
  }

  export type ActivityKeywordAvgOrderByAggregateInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
  }

  export type ActivityKeywordMaxOrderByAggregateInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
  }

  export type ActivityKeywordMinOrderByAggregateInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
  }

  export type ActivityKeywordSumOrderByAggregateInput = {
    activityId?: SortOrder
    keywordId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ActivityLocationCountOrderByAggregateInput = {
    locationId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ActivityLocationAvgOrderByAggregateInput = {
    locationId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ActivityLocationMaxOrderByAggregateInput = {
    locationId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ActivityLocationMinOrderByAggregateInput = {
    locationId?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ActivityLocationSumOrderByAggregateInput = {
    locationId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserLocationCountOrderByAggregateInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type UserLocationAvgOrderByAggregateInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type UserLocationMaxOrderByAggregateInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type UserLocationMinOrderByAggregateInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type UserLocationSumOrderByAggregateInput = {
    userLocationId?: SortOrder
    userId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ActivityLocationRelationFilter = {
    is?: ActivityLocationWhereInput
    isNot?: ActivityLocationWhereInput
  }

  export type UserLocationRelationFilter = {
    is?: UserLocationWhereInput
    isNot?: UserLocationWhereInput
  }

  export type RecommendationCountOrderByAggregateInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationAvgOrderByAggregateInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
  }

  export type RecommendationMaxOrderByAggregateInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationMinOrderByAggregateInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationSumOrderByAggregateInput = {
    recommendationId?: SortOrder
    locationId?: SortOrder
    userId?: SortOrder
    userLocationId?: SortOrder
  }

  export type RecentActivityCountOrderByAggregateInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    viewedAt?: SortOrder
  }

  export type RecentActivityAvgOrderByAggregateInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type RecentActivityMaxOrderByAggregateInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    viewedAt?: SortOrder
  }

  export type RecentActivityMinOrderByAggregateInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    viewedAt?: SortOrder
  }

  export type RecentActivitySumOrderByAggregateInput = {
    recentActivityId?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type UserLocationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput> | UserLocationCreateWithoutUserInput[] | UserLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput | UserLocationCreateOrConnectWithoutUserInput[]
    createMany?: UserLocationCreateManyUserInputEnvelope
    connect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type RecentActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput> | RecentActivityCreateWithoutUserInput[] | RecentActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutUserInput | RecentActivityCreateOrConnectWithoutUserInput[]
    createMany?: RecentActivityCreateManyUserInputEnvelope
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type UserLocationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput> | UserLocationCreateWithoutUserInput[] | UserLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput | UserLocationCreateOrConnectWithoutUserInput[]
    createMany?: UserLocationCreateManyUserInputEnvelope
    connect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type RecentActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput> | RecentActivityCreateWithoutUserInput[] | RecentActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutUserInput | RecentActivityCreateOrConnectWithoutUserInput[]
    createMany?: RecentActivityCreateManyUserInputEnvelope
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type UserLocationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput> | UserLocationCreateWithoutUserInput[] | UserLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput | UserLocationCreateOrConnectWithoutUserInput[]
    upsert?: UserLocationUpsertWithWhereUniqueWithoutUserInput | UserLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLocationCreateManyUserInputEnvelope
    set?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    disconnect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    delete?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    connect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    update?: UserLocationUpdateWithWhereUniqueWithoutUserInput | UserLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLocationUpdateManyWithWhereWithoutUserInput | UserLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLocationScalarWhereInput | UserLocationScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type RecentActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput> | RecentActivityCreateWithoutUserInput[] | RecentActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutUserInput | RecentActivityCreateOrConnectWithoutUserInput[]
    upsert?: RecentActivityUpsertWithWhereUniqueWithoutUserInput | RecentActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecentActivityCreateManyUserInputEnvelope
    set?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    disconnect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    delete?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    update?: RecentActivityUpdateWithWhereUniqueWithoutUserInput | RecentActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecentActivityUpdateManyWithWhereWithoutUserInput | RecentActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type UserLocationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput> | UserLocationCreateWithoutUserInput[] | UserLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput | UserLocationCreateOrConnectWithoutUserInput[]
    upsert?: UserLocationUpsertWithWhereUniqueWithoutUserInput | UserLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLocationCreateManyUserInputEnvelope
    set?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    disconnect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    delete?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    connect?: UserLocationWhereUniqueInput | UserLocationWhereUniqueInput[]
    update?: UserLocationUpdateWithWhereUniqueWithoutUserInput | UserLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLocationUpdateManyWithWhereWithoutUserInput | UserLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLocationScalarWhereInput | UserLocationScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type RecentActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput> | RecentActivityCreateWithoutUserInput[] | RecentActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutUserInput | RecentActivityCreateOrConnectWithoutUserInput[]
    upsert?: RecentActivityUpsertWithWhereUniqueWithoutUserInput | RecentActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecentActivityCreateManyUserInputEnvelope
    set?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    disconnect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    delete?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    update?: RecentActivityUpdateWithWhereUniqueWithoutUserInput | RecentActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecentActivityUpdateManyWithWhereWithoutUserInput | RecentActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityKeywordCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput> | ActivityKeywordCreateWithoutActivityInput[] | ActivityKeywordUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutActivityInput | ActivityKeywordCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityKeywordCreateManyActivityInputEnvelope
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
  }

  export type RecentActivityCreateNestedManyWithoutActivityInput = {
    create?: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput> | RecentActivityCreateWithoutActivityInput[] | RecentActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutActivityInput | RecentActivityCreateOrConnectWithoutActivityInput[]
    createMany?: RecentActivityCreateManyActivityInputEnvelope
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
  }

  export type ActivityKeywordUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput> | ActivityKeywordCreateWithoutActivityInput[] | ActivityKeywordUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutActivityInput | ActivityKeywordCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityKeywordCreateManyActivityInputEnvelope
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
  }

  export type RecentActivityUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput> | RecentActivityCreateWithoutActivityInput[] | RecentActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutActivityInput | RecentActivityCreateOrConnectWithoutActivityInput[]
    createMany?: RecentActivityCreateManyActivityInputEnvelope
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityKeywordUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput> | ActivityKeywordCreateWithoutActivityInput[] | ActivityKeywordUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutActivityInput | ActivityKeywordCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityKeywordUpsertWithWhereUniqueWithoutActivityInput | ActivityKeywordUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityKeywordCreateManyActivityInputEnvelope
    set?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    disconnect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    delete?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    update?: ActivityKeywordUpdateWithWhereUniqueWithoutActivityInput | ActivityKeywordUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityKeywordUpdateManyWithWhereWithoutActivityInput | ActivityKeywordUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
  }

  export type RecentActivityUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput> | RecentActivityCreateWithoutActivityInput[] | RecentActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutActivityInput | RecentActivityCreateOrConnectWithoutActivityInput[]
    upsert?: RecentActivityUpsertWithWhereUniqueWithoutActivityInput | RecentActivityUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RecentActivityCreateManyActivityInputEnvelope
    set?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    disconnect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    delete?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    update?: RecentActivityUpdateWithWhereUniqueWithoutActivityInput | RecentActivityUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RecentActivityUpdateManyWithWhereWithoutActivityInput | RecentActivityUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
  }

  export type ActivityKeywordUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput> | ActivityKeywordCreateWithoutActivityInput[] | ActivityKeywordUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutActivityInput | ActivityKeywordCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityKeywordUpsertWithWhereUniqueWithoutActivityInput | ActivityKeywordUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityKeywordCreateManyActivityInputEnvelope
    set?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    disconnect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    delete?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    update?: ActivityKeywordUpdateWithWhereUniqueWithoutActivityInput | ActivityKeywordUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityKeywordUpdateManyWithWhereWithoutActivityInput | ActivityKeywordUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
  }

  export type RecentActivityUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput> | RecentActivityCreateWithoutActivityInput[] | RecentActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RecentActivityCreateOrConnectWithoutActivityInput | RecentActivityCreateOrConnectWithoutActivityInput[]
    upsert?: RecentActivityUpsertWithWhereUniqueWithoutActivityInput | RecentActivityUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RecentActivityCreateManyActivityInputEnvelope
    set?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    disconnect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    delete?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    connect?: RecentActivityWhereUniqueInput | RecentActivityWhereUniqueInput[]
    update?: RecentActivityUpdateWithWhereUniqueWithoutActivityInput | RecentActivityUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RecentActivityUpdateManyWithWhereWithoutActivityInput | RecentActivityUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
  }

  export type ActivityKeywordCreateNestedManyWithoutKeywordInput = {
    create?: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput> | ActivityKeywordCreateWithoutKeywordInput[] | ActivityKeywordUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutKeywordInput | ActivityKeywordCreateOrConnectWithoutKeywordInput[]
    createMany?: ActivityKeywordCreateManyKeywordInputEnvelope
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
  }

  export type ActivityKeywordUncheckedCreateNestedManyWithoutKeywordInput = {
    create?: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput> | ActivityKeywordCreateWithoutKeywordInput[] | ActivityKeywordUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutKeywordInput | ActivityKeywordCreateOrConnectWithoutKeywordInput[]
    createMany?: ActivityKeywordCreateManyKeywordInputEnvelope
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
  }

  export type ActivityKeywordUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput> | ActivityKeywordCreateWithoutKeywordInput[] | ActivityKeywordUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutKeywordInput | ActivityKeywordCreateOrConnectWithoutKeywordInput[]
    upsert?: ActivityKeywordUpsertWithWhereUniqueWithoutKeywordInput | ActivityKeywordUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: ActivityKeywordCreateManyKeywordInputEnvelope
    set?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    disconnect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    delete?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    update?: ActivityKeywordUpdateWithWhereUniqueWithoutKeywordInput | ActivityKeywordUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: ActivityKeywordUpdateManyWithWhereWithoutKeywordInput | ActivityKeywordUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
  }

  export type ActivityKeywordUncheckedUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput> | ActivityKeywordCreateWithoutKeywordInput[] | ActivityKeywordUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: ActivityKeywordCreateOrConnectWithoutKeywordInput | ActivityKeywordCreateOrConnectWithoutKeywordInput[]
    upsert?: ActivityKeywordUpsertWithWhereUniqueWithoutKeywordInput | ActivityKeywordUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: ActivityKeywordCreateManyKeywordInputEnvelope
    set?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    disconnect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    delete?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    connect?: ActivityKeywordWhereUniqueInput | ActivityKeywordWhereUniqueInput[]
    update?: ActivityKeywordUpdateWithWhereUniqueWithoutKeywordInput | ActivityKeywordUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: ActivityKeywordUpdateManyWithWhereWithoutKeywordInput | ActivityKeywordUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
  }

  export type ActivityCreateNestedOneWithoutActivityKeywordsInput = {
    create?: XOR<ActivityCreateWithoutActivityKeywordsInput, ActivityUncheckedCreateWithoutActivityKeywordsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityKeywordsInput
    connect?: ActivityWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutActivityKeywordsInput = {
    create?: XOR<KeywordCreateWithoutActivityKeywordsInput, KeywordUncheckedCreateWithoutActivityKeywordsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutActivityKeywordsInput
    connect?: KeywordWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutActivityKeywordsNestedInput = {
    create?: XOR<ActivityCreateWithoutActivityKeywordsInput, ActivityUncheckedCreateWithoutActivityKeywordsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityKeywordsInput
    upsert?: ActivityUpsertWithoutActivityKeywordsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutActivityKeywordsInput, ActivityUpdateWithoutActivityKeywordsInput>, ActivityUncheckedUpdateWithoutActivityKeywordsInput>
  }

  export type KeywordUpdateOneRequiredWithoutActivityKeywordsNestedInput = {
    create?: XOR<KeywordCreateWithoutActivityKeywordsInput, KeywordUncheckedCreateWithoutActivityKeywordsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutActivityKeywordsInput
    upsert?: KeywordUpsertWithoutActivityKeywordsInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutActivityKeywordsInput, KeywordUpdateWithoutActivityKeywordsInput>, KeywordUncheckedUpdateWithoutActivityKeywordsInput>
  }

  export type RecommendationCreateNestedManyWithoutLocationInput = {
    create?: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput> | RecommendationCreateWithoutLocationInput[] | RecommendationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutLocationInput | RecommendationCreateOrConnectWithoutLocationInput[]
    createMany?: RecommendationCreateManyLocationInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput> | RecommendationCreateWithoutLocationInput[] | RecommendationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutLocationInput | RecommendationCreateOrConnectWithoutLocationInput[]
    createMany?: RecommendationCreateManyLocationInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RecommendationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput> | RecommendationCreateWithoutLocationInput[] | RecommendationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutLocationInput | RecommendationCreateOrConnectWithoutLocationInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutLocationInput | RecommendationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RecommendationCreateManyLocationInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutLocationInput | RecommendationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutLocationInput | RecommendationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput> | RecommendationCreateWithoutLocationInput[] | RecommendationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutLocationInput | RecommendationCreateOrConnectWithoutLocationInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutLocationInput | RecommendationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: RecommendationCreateManyLocationInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutLocationInput | RecommendationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutLocationInput | RecommendationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserLocationsInput = {
    create?: XOR<UserCreateWithoutUserLocationsInput, UserUncheckedCreateWithoutUserLocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLocationsInput
    connect?: UserWhereUniqueInput
  }

  export type RecommendationCreateNestedManyWithoutUserLocationInput = {
    create?: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput> | RecommendationCreateWithoutUserLocationInput[] | RecommendationUncheckedCreateWithoutUserLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserLocationInput | RecommendationCreateOrConnectWithoutUserLocationInput[]
    createMany?: RecommendationCreateManyUserLocationInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutUserLocationInput = {
    create?: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput> | RecommendationCreateWithoutUserLocationInput[] | RecommendationUncheckedCreateWithoutUserLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserLocationInput | RecommendationCreateOrConnectWithoutUserLocationInput[]
    createMany?: RecommendationCreateManyUserLocationInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUserLocationsNestedInput = {
    create?: XOR<UserCreateWithoutUserLocationsInput, UserUncheckedCreateWithoutUserLocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLocationsInput
    upsert?: UserUpsertWithoutUserLocationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserLocationsInput, UserUpdateWithoutUserLocationsInput>, UserUncheckedUpdateWithoutUserLocationsInput>
  }

  export type RecommendationUpdateManyWithoutUserLocationNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput> | RecommendationCreateWithoutUserLocationInput[] | RecommendationUncheckedCreateWithoutUserLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserLocationInput | RecommendationCreateOrConnectWithoutUserLocationInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserLocationInput | RecommendationUpsertWithWhereUniqueWithoutUserLocationInput[]
    createMany?: RecommendationCreateManyUserLocationInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserLocationInput | RecommendationUpdateWithWhereUniqueWithoutUserLocationInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserLocationInput | RecommendationUpdateManyWithWhereWithoutUserLocationInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutUserLocationNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput> | RecommendationCreateWithoutUserLocationInput[] | RecommendationUncheckedCreateWithoutUserLocationInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserLocationInput | RecommendationCreateOrConnectWithoutUserLocationInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserLocationInput | RecommendationUpsertWithWhereUniqueWithoutUserLocationInput[]
    createMany?: RecommendationCreateManyUserLocationInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserLocationInput | RecommendationUpdateWithWhereUniqueWithoutUserLocationInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserLocationInput | RecommendationUpdateManyWithWhereWithoutUserLocationInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type ActivityLocationCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<ActivityLocationCreateWithoutRecommendationsInput, ActivityLocationUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ActivityLocationCreateOrConnectWithoutRecommendationsInput
    connect?: ActivityLocationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserLocationCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<UserLocationCreateWithoutRecommendationsInput, UserLocationUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutRecommendationsInput
    connect?: UserLocationWhereUniqueInput
  }

  export type ActivityLocationUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<ActivityLocationCreateWithoutRecommendationsInput, ActivityLocationUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ActivityLocationCreateOrConnectWithoutRecommendationsInput
    upsert?: ActivityLocationUpsertWithoutRecommendationsInput
    connect?: ActivityLocationWhereUniqueInput
    update?: XOR<XOR<ActivityLocationUpdateToOneWithWhereWithoutRecommendationsInput, ActivityLocationUpdateWithoutRecommendationsInput>, ActivityLocationUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    upsert?: UserUpsertWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationsInput, UserUpdateWithoutRecommendationsInput>, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserLocationUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<UserLocationCreateWithoutRecommendationsInput, UserLocationUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutRecommendationsInput
    upsert?: UserLocationUpsertWithoutRecommendationsInput
    connect?: UserLocationWhereUniqueInput
    update?: XOR<XOR<UserLocationUpdateToOneWithWhereWithoutRecommendationsInput, UserLocationUpdateWithoutRecommendationsInput>, UserLocationUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserCreateNestedOneWithoutRecentActivitiesInput = {
    create?: XOR<UserCreateWithoutRecentActivitiesInput, UserUncheckedCreateWithoutRecentActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecentActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutRecentActivitiesInput = {
    create?: XOR<ActivityCreateWithoutRecentActivitiesInput, ActivityUncheckedCreateWithoutRecentActivitiesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutRecentActivitiesInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRecentActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutRecentActivitiesInput, UserUncheckedCreateWithoutRecentActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecentActivitiesInput
    upsert?: UserUpsertWithoutRecentActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecentActivitiesInput, UserUpdateWithoutRecentActivitiesInput>, UserUncheckedUpdateWithoutRecentActivitiesInput>
  }

  export type ActivityUpdateOneRequiredWithoutRecentActivitiesNestedInput = {
    create?: XOR<ActivityCreateWithoutRecentActivitiesInput, ActivityUncheckedCreateWithoutRecentActivitiesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutRecentActivitiesInput
    upsert?: ActivityUpsertWithoutRecentActivitiesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutRecentActivitiesInput, ActivityUpdateWithoutRecentActivitiesInput>, ActivityUncheckedUpdateWithoutRecentActivitiesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ActivityCreateWithoutUserInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    activityKeywords?: ActivityKeywordCreateNestedManyWithoutActivityInput
    recentActivities?: RecentActivityCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutUserInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    activityKeywords?: ActivityKeywordUncheckedCreateNestedManyWithoutActivityInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLocationCreateWithoutUserInput = {
    userLocationId: number
    latitude: number
    longitude: number
    recommendations?: RecommendationCreateNestedManyWithoutUserLocationInput
  }

  export type UserLocationUncheckedCreateWithoutUserInput = {
    userLocationId: number
    latitude: number
    longitude: number
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserLocationInput
  }

  export type UserLocationCreateOrConnectWithoutUserInput = {
    where: UserLocationWhereUniqueInput
    create: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
  }

  export type UserLocationCreateManyUserInputEnvelope = {
    data: UserLocationCreateManyUserInput | UserLocationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationCreateWithoutUserInput = {
    recommendationId: number
    createdAt: Date | string
    location: ActivityLocationCreateNestedOneWithoutRecommendationsInput
    userLocation: UserLocationCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutUserInput = {
    recommendationId: number
    locationId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecommendationCreateOrConnectWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationCreateManyUserInputEnvelope = {
    data: RecommendationCreateManyUserInput | RecommendationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecentActivityCreateWithoutUserInput = {
    recentActivityId: number
    viewedAt: Date | string
    activity: ActivityCreateNestedOneWithoutRecentActivitiesInput
  }

  export type RecentActivityUncheckedCreateWithoutUserInput = {
    recentActivityId: number
    activityId: number
    viewedAt: Date | string
  }

  export type RecentActivityCreateOrConnectWithoutUserInput = {
    where: RecentActivityWhereUniqueInput
    create: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput>
  }

  export type RecentActivityCreateManyUserInputEnvelope = {
    data: RecentActivityCreateManyUserInput | RecentActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    activityId?: IntFilter<"Activity"> | number
    title?: StringFilter<"Activity"> | string
    description?: StringFilter<"Activity"> | string
    location?: StringFilter<"Activity"> | string
    imageUrl?: StringNullableFilter<"Activity"> | string | null
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    userId?: IntFilter<"Activity"> | number
  }

  export type UserLocationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLocationWhereUniqueInput
    update: XOR<UserLocationUpdateWithoutUserInput, UserLocationUncheckedUpdateWithoutUserInput>
    create: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
  }

  export type UserLocationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLocationWhereUniqueInput
    data: XOR<UserLocationUpdateWithoutUserInput, UserLocationUncheckedUpdateWithoutUserInput>
  }

  export type UserLocationUpdateManyWithWhereWithoutUserInput = {
    where: UserLocationScalarWhereInput
    data: XOR<UserLocationUpdateManyMutationInput, UserLocationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLocationScalarWhereInput = {
    AND?: UserLocationScalarWhereInput | UserLocationScalarWhereInput[]
    OR?: UserLocationScalarWhereInput[]
    NOT?: UserLocationScalarWhereInput | UserLocationScalarWhereInput[]
    userLocationId?: IntFilter<"UserLocation"> | number
    userId?: IntFilter<"UserLocation"> | number
    latitude?: FloatFilter<"UserLocation"> | number
    longitude?: FloatFilter<"UserLocation"> | number
  }

  export type RecommendationUpsertWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutUserInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    OR?: RecommendationScalarWhereInput[]
    NOT?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    recommendationId?: IntFilter<"Recommendation"> | number
    locationId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    userLocationId?: IntFilter<"Recommendation"> | number
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
  }

  export type RecentActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: RecentActivityWhereUniqueInput
    update: XOR<RecentActivityUpdateWithoutUserInput, RecentActivityUncheckedUpdateWithoutUserInput>
    create: XOR<RecentActivityCreateWithoutUserInput, RecentActivityUncheckedCreateWithoutUserInput>
  }

  export type RecentActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: RecentActivityWhereUniqueInput
    data: XOR<RecentActivityUpdateWithoutUserInput, RecentActivityUncheckedUpdateWithoutUserInput>
  }

  export type RecentActivityUpdateManyWithWhereWithoutUserInput = {
    where: RecentActivityScalarWhereInput
    data: XOR<RecentActivityUpdateManyMutationInput, RecentActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type RecentActivityScalarWhereInput = {
    AND?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
    OR?: RecentActivityScalarWhereInput[]
    NOT?: RecentActivityScalarWhereInput | RecentActivityScalarWhereInput[]
    recentActivityId?: IntFilter<"RecentActivity"> | number
    userId?: IntFilter<"RecentActivity"> | number
    activityId?: IntFilter<"RecentActivity"> | number
    viewedAt?: DateTimeFilter<"RecentActivity"> | Date | string
  }

  export type UserCreateWithoutActivitiesInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    userLocations?: UserLocationCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    userLocations?: UserLocationUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityKeywordCreateWithoutActivityInput = {
    keyword: KeywordCreateNestedOneWithoutActivityKeywordsInput
  }

  export type ActivityKeywordUncheckedCreateWithoutActivityInput = {
    keywordId: number
  }

  export type ActivityKeywordCreateOrConnectWithoutActivityInput = {
    where: ActivityKeywordWhereUniqueInput
    create: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput>
  }

  export type ActivityKeywordCreateManyActivityInputEnvelope = {
    data: ActivityKeywordCreateManyActivityInput | ActivityKeywordCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type RecentActivityCreateWithoutActivityInput = {
    recentActivityId: number
    viewedAt: Date | string
    user: UserCreateNestedOneWithoutRecentActivitiesInput
  }

  export type RecentActivityUncheckedCreateWithoutActivityInput = {
    recentActivityId: number
    userId: number
    viewedAt: Date | string
  }

  export type RecentActivityCreateOrConnectWithoutActivityInput = {
    where: RecentActivityWhereUniqueInput
    create: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput>
  }

  export type RecentActivityCreateManyActivityInputEnvelope = {
    data: RecentActivityCreateManyActivityInput | RecentActivityCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userLocations?: UserLocationUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userLocations?: UserLocationUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityKeywordUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityKeywordWhereUniqueInput
    update: XOR<ActivityKeywordUpdateWithoutActivityInput, ActivityKeywordUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityKeywordCreateWithoutActivityInput, ActivityKeywordUncheckedCreateWithoutActivityInput>
  }

  export type ActivityKeywordUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityKeywordWhereUniqueInput
    data: XOR<ActivityKeywordUpdateWithoutActivityInput, ActivityKeywordUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityKeywordUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityKeywordScalarWhereInput
    data: XOR<ActivityKeywordUpdateManyMutationInput, ActivityKeywordUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityKeywordScalarWhereInput = {
    AND?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
    OR?: ActivityKeywordScalarWhereInput[]
    NOT?: ActivityKeywordScalarWhereInput | ActivityKeywordScalarWhereInput[]
    activityId?: IntFilter<"ActivityKeyword"> | number
    keywordId?: IntFilter<"ActivityKeyword"> | number
  }

  export type RecentActivityUpsertWithWhereUniqueWithoutActivityInput = {
    where: RecentActivityWhereUniqueInput
    update: XOR<RecentActivityUpdateWithoutActivityInput, RecentActivityUncheckedUpdateWithoutActivityInput>
    create: XOR<RecentActivityCreateWithoutActivityInput, RecentActivityUncheckedCreateWithoutActivityInput>
  }

  export type RecentActivityUpdateWithWhereUniqueWithoutActivityInput = {
    where: RecentActivityWhereUniqueInput
    data: XOR<RecentActivityUpdateWithoutActivityInput, RecentActivityUncheckedUpdateWithoutActivityInput>
  }

  export type RecentActivityUpdateManyWithWhereWithoutActivityInput = {
    where: RecentActivityScalarWhereInput
    data: XOR<RecentActivityUpdateManyMutationInput, RecentActivityUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityKeywordCreateWithoutKeywordInput = {
    activity: ActivityCreateNestedOneWithoutActivityKeywordsInput
  }

  export type ActivityKeywordUncheckedCreateWithoutKeywordInput = {
    activityId: number
  }

  export type ActivityKeywordCreateOrConnectWithoutKeywordInput = {
    where: ActivityKeywordWhereUniqueInput
    create: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput>
  }

  export type ActivityKeywordCreateManyKeywordInputEnvelope = {
    data: ActivityKeywordCreateManyKeywordInput | ActivityKeywordCreateManyKeywordInput[]
    skipDuplicates?: boolean
  }

  export type ActivityKeywordUpsertWithWhereUniqueWithoutKeywordInput = {
    where: ActivityKeywordWhereUniqueInput
    update: XOR<ActivityKeywordUpdateWithoutKeywordInput, ActivityKeywordUncheckedUpdateWithoutKeywordInput>
    create: XOR<ActivityKeywordCreateWithoutKeywordInput, ActivityKeywordUncheckedCreateWithoutKeywordInput>
  }

  export type ActivityKeywordUpdateWithWhereUniqueWithoutKeywordInput = {
    where: ActivityKeywordWhereUniqueInput
    data: XOR<ActivityKeywordUpdateWithoutKeywordInput, ActivityKeywordUncheckedUpdateWithoutKeywordInput>
  }

  export type ActivityKeywordUpdateManyWithWhereWithoutKeywordInput = {
    where: ActivityKeywordScalarWhereInput
    data: XOR<ActivityKeywordUpdateManyMutationInput, ActivityKeywordUncheckedUpdateManyWithoutKeywordInput>
  }

  export type ActivityCreateWithoutActivityKeywordsInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
    recentActivities?: RecentActivityCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutActivityKeywordsInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    userId: number
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutActivityKeywordsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutActivityKeywordsInput, ActivityUncheckedCreateWithoutActivityKeywordsInput>
  }

  export type KeywordCreateWithoutActivityKeywordsInput = {
    keywordId: number
    keywordName: string
  }

  export type KeywordUncheckedCreateWithoutActivityKeywordsInput = {
    keywordId: number
    keywordName: string
  }

  export type KeywordCreateOrConnectWithoutActivityKeywordsInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutActivityKeywordsInput, KeywordUncheckedCreateWithoutActivityKeywordsInput>
  }

  export type ActivityUpsertWithoutActivityKeywordsInput = {
    update: XOR<ActivityUpdateWithoutActivityKeywordsInput, ActivityUncheckedUpdateWithoutActivityKeywordsInput>
    create: XOR<ActivityCreateWithoutActivityKeywordsInput, ActivityUncheckedCreateWithoutActivityKeywordsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutActivityKeywordsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutActivityKeywordsInput, ActivityUncheckedUpdateWithoutActivityKeywordsInput>
  }

  export type ActivityUpdateWithoutActivityKeywordsInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutActivityKeywordsInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type KeywordUpsertWithoutActivityKeywordsInput = {
    update: XOR<KeywordUpdateWithoutActivityKeywordsInput, KeywordUncheckedUpdateWithoutActivityKeywordsInput>
    create: XOR<KeywordCreateWithoutActivityKeywordsInput, KeywordUncheckedCreateWithoutActivityKeywordsInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutActivityKeywordsInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutActivityKeywordsInput, KeywordUncheckedUpdateWithoutActivityKeywordsInput>
  }

  export type KeywordUpdateWithoutActivityKeywordsInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordUncheckedUpdateWithoutActivityKeywordsInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
    keywordName?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationCreateWithoutLocationInput = {
    recommendationId: number
    createdAt: Date | string
    user: UserCreateNestedOneWithoutRecommendationsInput
    userLocation: UserLocationCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutLocationInput = {
    recommendationId: number
    userId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecommendationCreateOrConnectWithoutLocationInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput>
  }

  export type RecommendationCreateManyLocationInputEnvelope = {
    data: RecommendationCreateManyLocationInput | RecommendationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationUpsertWithWhereUniqueWithoutLocationInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutLocationInput, RecommendationUncheckedUpdateWithoutLocationInput>
    create: XOR<RecommendationCreateWithoutLocationInput, RecommendationUncheckedCreateWithoutLocationInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutLocationInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutLocationInput, RecommendationUncheckedUpdateWithoutLocationInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutLocationInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutLocationInput>
  }

  export type UserCreateWithoutUserLocationsInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserLocationsInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserLocationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserLocationsInput, UserUncheckedCreateWithoutUserLocationsInput>
  }

  export type RecommendationCreateWithoutUserLocationInput = {
    recommendationId: number
    createdAt: Date | string
    location: ActivityLocationCreateNestedOneWithoutRecommendationsInput
    user: UserCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutUserLocationInput = {
    recommendationId: number
    locationId: number
    userId: number
    createdAt: Date | string
  }

  export type RecommendationCreateOrConnectWithoutUserLocationInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput>
  }

  export type RecommendationCreateManyUserLocationInputEnvelope = {
    data: RecommendationCreateManyUserLocationInput | RecommendationCreateManyUserLocationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserLocationsInput = {
    update: XOR<UserUpdateWithoutUserLocationsInput, UserUncheckedUpdateWithoutUserLocationsInput>
    create: XOR<UserCreateWithoutUserLocationsInput, UserUncheckedCreateWithoutUserLocationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserLocationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserLocationsInput, UserUncheckedUpdateWithoutUserLocationsInput>
  }

  export type UserUpdateWithoutUserLocationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserLocationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecommendationUpsertWithWhereUniqueWithoutUserLocationInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutUserLocationInput, RecommendationUncheckedUpdateWithoutUserLocationInput>
    create: XOR<RecommendationCreateWithoutUserLocationInput, RecommendationUncheckedCreateWithoutUserLocationInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutUserLocationInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutUserLocationInput, RecommendationUncheckedUpdateWithoutUserLocationInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutUserLocationInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutUserLocationInput>
  }

  export type ActivityLocationCreateWithoutRecommendationsInput = {
    locationId: number
    name: string
    latitude: number
    longitude: number
  }

  export type ActivityLocationUncheckedCreateWithoutRecommendationsInput = {
    locationId: number
    name: string
    latitude: number
    longitude: number
  }

  export type ActivityLocationCreateOrConnectWithoutRecommendationsInput = {
    where: ActivityLocationWhereUniqueInput
    create: XOR<ActivityLocationCreateWithoutRecommendationsInput, ActivityLocationUncheckedCreateWithoutRecommendationsInput>
  }

  export type UserCreateWithoutRecommendationsInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    userLocations?: UserLocationCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecommendationsInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    userLocations?: UserLocationUncheckedCreateNestedManyWithoutUserInput
    recentActivities?: RecentActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecommendationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
  }

  export type UserLocationCreateWithoutRecommendationsInput = {
    userLocationId: number
    latitude: number
    longitude: number
    user: UserCreateNestedOneWithoutUserLocationsInput
  }

  export type UserLocationUncheckedCreateWithoutRecommendationsInput = {
    userLocationId: number
    userId: number
    latitude: number
    longitude: number
  }

  export type UserLocationCreateOrConnectWithoutRecommendationsInput = {
    where: UserLocationWhereUniqueInput
    create: XOR<UserLocationCreateWithoutRecommendationsInput, UserLocationUncheckedCreateWithoutRecommendationsInput>
  }

  export type ActivityLocationUpsertWithoutRecommendationsInput = {
    update: XOR<ActivityLocationUpdateWithoutRecommendationsInput, ActivityLocationUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<ActivityLocationCreateWithoutRecommendationsInput, ActivityLocationUncheckedCreateWithoutRecommendationsInput>
    where?: ActivityLocationWhereInput
  }

  export type ActivityLocationUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: ActivityLocationWhereInput
    data: XOR<ActivityLocationUpdateWithoutRecommendationsInput, ActivityLocationUncheckedUpdateWithoutRecommendationsInput>
  }

  export type ActivityLocationUpdateWithoutRecommendationsInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type ActivityLocationUncheckedUpdateWithoutRecommendationsInput = {
    locationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutRecommendationsInput = {
    update: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateWithoutRecommendationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUncheckedUpdateManyWithoutUserNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserLocationUpsertWithoutRecommendationsInput = {
    update: XOR<UserLocationUpdateWithoutRecommendationsInput, UserLocationUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<UserLocationCreateWithoutRecommendationsInput, UserLocationUncheckedCreateWithoutRecommendationsInput>
    where?: UserLocationWhereInput
  }

  export type UserLocationUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: UserLocationWhereInput
    data: XOR<UserLocationUpdateWithoutRecommendationsInput, UserLocationUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserLocationUpdateWithoutRecommendationsInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserLocationsNestedInput
  }

  export type UserLocationUncheckedUpdateWithoutRecommendationsInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutRecentActivitiesInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    userLocations?: UserLocationCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecentActivitiesInput = {
    userId: number
    username: string
    email: string
    profileImage?: string | null
    password: string
    refreshToken?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    userLocations?: UserLocationUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecentActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecentActivitiesInput, UserUncheckedCreateWithoutRecentActivitiesInput>
  }

  export type ActivityCreateWithoutRecentActivitiesInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    user: UserCreateNestedOneWithoutActivitiesInput
    activityKeywords?: ActivityKeywordCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutRecentActivitiesInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
    userId: number
    activityKeywords?: ActivityKeywordUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutRecentActivitiesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutRecentActivitiesInput, ActivityUncheckedCreateWithoutRecentActivitiesInput>
  }

  export type UserUpsertWithoutRecentActivitiesInput = {
    update: XOR<UserUpdateWithoutRecentActivitiesInput, UserUncheckedUpdateWithoutRecentActivitiesInput>
    create: XOR<UserCreateWithoutRecentActivitiesInput, UserUncheckedCreateWithoutRecentActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecentActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecentActivitiesInput, UserUncheckedUpdateWithoutRecentActivitiesInput>
  }

  export type UserUpdateWithoutRecentActivitiesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecentActivitiesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    userLocations?: UserLocationUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityUpsertWithoutRecentActivitiesInput = {
    update: XOR<ActivityUpdateWithoutRecentActivitiesInput, ActivityUncheckedUpdateWithoutRecentActivitiesInput>
    create: XOR<ActivityCreateWithoutRecentActivitiesInput, ActivityUncheckedCreateWithoutRecentActivitiesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutRecentActivitiesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutRecentActivitiesInput, ActivityUncheckedUpdateWithoutRecentActivitiesInput>
  }

  export type ActivityUpdateWithoutRecentActivitiesInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    activityKeywords?: ActivityKeywordUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutRecentActivitiesInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    activityKeywords?: ActivityKeywordUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyUserInput = {
    activityId: number
    title: string
    description: string
    location: string
    imageUrl?: string | null
    createdAt: Date | string
  }

  export type UserLocationCreateManyUserInput = {
    userLocationId: number
    latitude: number
    longitude: number
  }

  export type RecommendationCreateManyUserInput = {
    recommendationId: number
    locationId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecentActivityCreateManyUserInput = {
    recentActivityId: number
    activityId: number
    viewedAt: Date | string
  }

  export type ActivityUpdateWithoutUserInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityKeywords?: ActivityKeywordUpdateManyWithoutActivityNestedInput
    recentActivities?: RecentActivityUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutUserInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityKeywords?: ActivityKeywordUncheckedUpdateManyWithoutActivityNestedInput
    recentActivities?: RecentActivityUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLocationUpdateWithoutUserInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    recommendations?: RecommendationUpdateManyWithoutUserLocationNestedInput
  }

  export type UserLocationUncheckedUpdateWithoutUserInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserLocationNestedInput
  }

  export type UserLocationUncheckedUpdateManyWithoutUserInput = {
    userLocationId?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type RecommendationUpdateWithoutUserInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: ActivityLocationUpdateOneRequiredWithoutRecommendationsNestedInput
    userLocation?: UserLocationUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutUserInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutUserInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityUpdateWithoutUserInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutRecentActivitiesNestedInput
  }

  export type RecentActivityUncheckedUpdateWithoutUserInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityUncheckedUpdateManyWithoutUserInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityKeywordCreateManyActivityInput = {
    keywordId: number
  }

  export type RecentActivityCreateManyActivityInput = {
    recentActivityId: number
    userId: number
    viewedAt: Date | string
  }

  export type ActivityKeywordUpdateWithoutActivityInput = {
    keyword?: KeywordUpdateOneRequiredWithoutActivityKeywordsNestedInput
  }

  export type ActivityKeywordUncheckedUpdateWithoutActivityInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityKeywordUncheckedUpdateManyWithoutActivityInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type RecentActivityUpdateWithoutActivityInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecentActivitiesNestedInput
  }

  export type RecentActivityUncheckedUpdateWithoutActivityInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentActivityUncheckedUpdateManyWithoutActivityInput = {
    recentActivityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityKeywordCreateManyKeywordInput = {
    activityId: number
  }

  export type ActivityKeywordUpdateWithoutKeywordInput = {
    activity?: ActivityUpdateOneRequiredWithoutActivityKeywordsNestedInput
  }

  export type ActivityKeywordUncheckedUpdateWithoutKeywordInput = {
    activityId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityKeywordUncheckedUpdateManyWithoutKeywordInput = {
    activityId?: IntFieldUpdateOperationsInput | number
  }

  export type RecommendationCreateManyLocationInput = {
    recommendationId: number
    userId: number
    userLocationId: number
    createdAt: Date | string
  }

  export type RecommendationUpdateWithoutLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
    userLocation?: UserLocationUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userLocationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateManyUserLocationInput = {
    recommendationId: number
    locationId: number
    userId: number
    createdAt: Date | string
  }

  export type RecommendationUpdateWithoutUserLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: ActivityLocationUpdateOneRequiredWithoutRecommendationsNestedInput
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutUserLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutUserLocationInput = {
    recommendationId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityCountOutputTypeDefaultArgs instead
     */
    export type ActivityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeywordCountOutputTypeDefaultArgs instead
     */
    export type KeywordCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeywordCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityLocationCountOutputTypeDefaultArgs instead
     */
    export type ActivityLocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityLocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLocationCountOutputTypeDefaultArgs instead
     */
    export type UserLocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityDefaultArgs instead
     */
    export type ActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeywordDefaultArgs instead
     */
    export type KeywordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeywordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityKeywordDefaultArgs instead
     */
    export type ActivityKeywordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityKeywordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityLocationDefaultArgs instead
     */
    export type ActivityLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLocationDefaultArgs instead
     */
    export type UserLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecommendationDefaultArgs instead
     */
    export type RecommendationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecommendationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecentActivityDefaultArgs instead
     */
    export type RecentActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecentActivityDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}